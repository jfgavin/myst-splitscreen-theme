{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/legacy-modes/mode/fortran.js"],
  "sourcesContent": ["function words(array) {\n  var keys = {};\n  for (var i = 0; i < array.length; ++i) {\n    keys[array[i]] = true;\n  }\n  return keys;\n}\n\nvar keywords = words([\n  \"abstract\", \"accept\", \"allocatable\", \"allocate\",\n  \"array\", \"assign\", \"asynchronous\", \"backspace\",\n  \"bind\", \"block\", \"byte\", \"call\", \"case\",\n  \"class\", \"close\", \"common\", \"contains\",\n  \"continue\", \"cycle\", \"data\", \"deallocate\",\n  \"decode\", \"deferred\", \"dimension\", \"do\",\n  \"elemental\", \"else\", \"encode\", \"end\",\n  \"endif\", \"entry\", \"enumerator\", \"equivalence\",\n  \"exit\", \"external\", \"extrinsic\", \"final\",\n  \"forall\", \"format\", \"function\", \"generic\",\n  \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\",\n  \"inquire\", \"intent\", \"interface\", \"intrinsic\",\n  \"module\", \"namelist\", \"non_intrinsic\",\n  \"non_overridable\", \"none\", \"nopass\",\n  \"nullify\", \"open\", \"optional\", \"options\",\n  \"parameter\", \"pass\", \"pause\", \"pointer\",\n  \"print\", \"private\", \"program\", \"protected\",\n  \"public\", \"pure\", \"read\", \"recursive\", \"result\",\n  \"return\", \"rewind\", \"save\", \"select\", \"sequence\",\n  \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\",\n  \"use\", \"value\", \"volatile\", \"where\", \"while\",\n  \"write\"]);\nvar builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\",\n                      \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\",\n                      \"all\", \"allocated\", \"alog\", \"amax\", \"amin\",\n                      \"amod\", \"and\", \"anint\", \"any\", \"asin\",\n                      \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\",\n                      \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\",\n                      \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\",\n                      \"clog\", \"cmplx\", \"command_argument_count\",\n                      \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\",\n                      \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\",\n                      \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\",\n                      \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\",\n                      \"c_alert\", \"c_backspace\", \"c_form_feed\",\n                      \"c_new_line\", \"c_carriage_return\",\n                      \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\",\n                      \"dacos\", \"dasin\", \"datan\", \"date_and_time\",\n                      \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\",\n                      \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\",\n                      \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\",\n                      \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\",\n                      \"dot_product\", \"dprod\", \"dsign\", \"dsinh\",\n                      \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\",\n                      \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\",\n                      \"exit\", \"exp\", \"exponent\", \"extends_type_of\",\n                      \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\",\n                      \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\",\n                      \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\",\n                      \"get_command\", \"get_command_argument\",\n                      \"get_environment_variable\", \"getcwd\",\n                      \"getenv\", \"getgid\", \"getlog\", \"getpid\",\n                      \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\",\n                      \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\",\n                      \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\",\n                      \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\",\n                      \"imagpart\", \"index\", \"int\", \"ior\", \"irand\",\n                      \"isatty\", \"ishft\", \"ishftc\", \"isign\",\n                      \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\",\n                      \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\",\n                      \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\",\n                      \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\",\n                      \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\",\n                      \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\",\n                      \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\",\n                      \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\",\n                      \"perror\", \"precision\", \"present\", \"product\", \"radix\",\n                      \"rand\", \"random_number\", \"random_seed\", \"range\",\n                      \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\",\n                      \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\",\n                      \"scan\", \"second\", \"selected_int_kind\",\n                      \"selected_real_kind\", \"set_exponent\", \"shape\",\n                      \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\",\n                      \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\",\n                      \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\",\n                      \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\",\n                      \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\",\n                      \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\",\n                      \"zlog\", \"zsin\", \"zsqrt\"]);\n\nvar dataTypes =  words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\",\n                        \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\",\n                        \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\",\n                        \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\",\n                        \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\",\n                        \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\",\n                        \"c_intptr_t\", \"c_long\", \"c_long_double\",\n                        \"c_long_double_complex\", \"c_long_long\", \"c_ptr\",\n                        \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\",\n                        \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\nvar isOperatorChar = /[+\\-*&=<>\\/\\:]/;\nvar litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\n\nfunction tokenBase(stream, state) {\n\n  if (stream.match(litOperator)){\n    return 'operator';\n  }\n\n  var ch = stream.next();\n  if (ch == \"!\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]\\(\\),]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var word = stream.current().toLowerCase();\n\n  if (keywords.hasOwnProperty(word)){\n    return 'keyword';\n  }\n  if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n    return 'builtin';\n  }\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\n// Interface\n\nexport const fortran = {\n  name: \"fortran\",\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  }\n};\n\n"],
  "mappings": "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",
  "names": []
}
