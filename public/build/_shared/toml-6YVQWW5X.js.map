{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/legacy-modes/mode/toml.js"],
  "sourcesContent": ["export const toml = {\n  name: \"toml\",\n  startState: function () {\n    return {\n      inString: false,\n      stringType: \"\",\n      lhs: true,\n      inArray: 0\n    };\n  },\n  token: function (stream, state) {\n    //check for state changes\n    if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n      state.stringType = stream.peek();\n      stream.next(); // Skip quote\n      state.inString = true; // Update state\n    }\n    if (stream.sol() && state.inArray === 0) {\n      state.lhs = true;\n    }\n    //return state\n    if (state.inString) {\n      while (state.inString && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.inString = false; // Clear flag\n        } else if (stream.peek() === '\\\\') {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n    } else if (state.inArray && stream.peek() === ']') {\n      stream.next();\n      state.inArray--;\n      return 'bracket';\n    } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n      stream.next();//skip closing ]\n      // array of objects has an extra open & close []\n      if (stream.peek() === ']') stream.next();\n      return \"atom\";\n    } else if (stream.peek() === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n      return \"property\";\n    } else if (state.lhs && stream.peek() === \"=\") {\n      stream.next();\n      state.lhs = false;\n      return null;\n    } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n      return 'atom'; //date\n    } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n      return 'atom';\n    } else if (!state.lhs && stream.peek() === '[') {\n      state.inArray++;\n      stream.next();\n      return 'bracket';\n    } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n      return 'number';\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  },\n  languageData: {\n    commentTokens: { line: '#' },\n  },\n};\n"],
  "mappings": ";;;;;AAAA,IAAa;AAAb;AAAA;AAAO,IAAM,OAAO;AAAA,MAClB,MAAM;AAAA,MACN,YAAY,WAAY;AACtB,eAAO;AAAA,UACL,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,KAAK;AAAA,UACL,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,OAAO,SAAU,QAAQ,OAAO;AAE9B,YAAI,CAAC,MAAM,aAAc,OAAO,KAAK,KAAK,OAAS,OAAO,KAAK,KAAK,MAAO;AACzE,gBAAM,aAAa,OAAO,KAAK;AAC/B,iBAAO,KAAK;AACZ,gBAAM,WAAW;AAAA,QACnB;AACA,YAAI,OAAO,IAAI,KAAK,MAAM,YAAY,GAAG;AACvC,gBAAM,MAAM;AAAA,QACd;AAEA,YAAI,MAAM,UAAU;AAClB,iBAAO,MAAM,YAAY,CAAC,OAAO,IAAI,GAAG;AACtC,gBAAI,OAAO,KAAK,MAAM,MAAM,YAAY;AACtC,qBAAO,KAAK;AACZ,oBAAM,WAAW;AAAA,YACnB,WAAW,OAAO,KAAK,MAAM,MAAM;AACjC,qBAAO,KAAK;AACZ,qBAAO,KAAK;AAAA,YACd,OAAO;AACL,qBAAO,MAAM,cAAc;AAAA,YAC7B;AAAA,UACF;AACA,iBAAO,MAAM,MAAM,aAAa;AAAA,QAClC,WAAW,MAAM,WAAW,OAAO,KAAK,MAAM,KAAK;AACjD,iBAAO,KAAK;AACZ,gBAAM;AACN,iBAAO;AAAA,QACT,WAAW,MAAM,OAAO,OAAO,KAAK,MAAM,OAAO,OAAO,OAAO,GAAG,GAAG;AACnE,iBAAO,KAAK;AAEZ,cAAI,OAAO,KAAK,MAAM;AAAK,mBAAO,KAAK;AACvC,iBAAO;AAAA,QACT,WAAW,OAAO,KAAK,MAAM,KAAK;AAChC,iBAAO,UAAU;AACjB,iBAAO;AAAA,QACT,WAAW,OAAO,SAAS,GAAG;AAC5B,iBAAO;AAAA,QACT,WAAW,MAAM,OAAO,OAAO,SAAS,SAAU,GAAG;AAAE,iBAAO,KAAK,OAAO,KAAK;AAAA,QAAK,CAAC,GAAG;AACtF,iBAAO;AAAA,QACT,WAAW,MAAM,OAAO,OAAO,KAAK,MAAM,KAAK;AAC7C,iBAAO,KAAK;AACZ,gBAAM,MAAM;AACZ,iBAAO;AAAA,QACT,WAAW,CAAC,MAAM,OAAO,OAAO,MAAM,wBAAwB,GAAG;AAC/D,iBAAO;AAAA,QACT,WAAW,CAAC,MAAM,QAAQ,OAAO,MAAM,MAAM,KAAK,OAAO,MAAM,OAAO,IAAI;AACxE,iBAAO;AAAA,QACT,WAAW,CAAC,MAAM,OAAO,OAAO,KAAK,MAAM,KAAK;AAC9C,gBAAM;AACN,iBAAO,KAAK;AACZ,iBAAO;AAAA,QACT,WAAW,CAAC,MAAM,OAAO,OAAO,MAAM,mBAAmB,GAAG;AAC1D,iBAAO;AAAA,QACT,WAAW,CAAC,OAAO,SAAS,GAAG;AAC7B,iBAAO,KAAK;AAAA,QACd;AACA,eAAO;AAAA,MACT;AAAA,MACA,cAAc;AAAA,QACZ,eAAe,EAAE,MAAM,IAAI;AAAA,MAC7B;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
