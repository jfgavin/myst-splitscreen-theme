{
  "version": 3,
  "sources": ["../../../../../node_modules/@lumino/algorithm/src/array.ts", "../../../../../node_modules/@lumino/algorithm/src/iter.ts", "../../../../../node_modules/@lumino/algorithm/src/chain.ts", "../../../../../node_modules/@lumino/algorithm/src/empty.ts", "../../../../../node_modules/@lumino/algorithm/src/enumerate.ts", "../../../../../node_modules/@lumino/algorithm/src/filter.ts", "../../../../../node_modules/@lumino/algorithm/src/find.ts", "../../../../../node_modules/@lumino/algorithm/src/map.ts", "../../../../../node_modules/@lumino/algorithm/src/range.ts", "../../../../../node_modules/@lumino/algorithm/src/reduce.ts", "../../../../../node_modules/@lumino/algorithm/src/repeat.ts", "../../../../../node_modules/@lumino/algorithm/src/retro.ts", "../../../../../node_modules/@lumino/algorithm/src/sort.ts", "../../../../../node_modules/@lumino/algorithm/src/stride.ts", "../../../../../node_modules/@lumino/algorithm/src/string.ts", "../../../../../node_modules/@lumino/algorithm/src/take.ts", "../../../../../node_modules/@lumino/algorithm/src/zip.ts", "../../../../../node_modules/@lumino/collections/src/bplustree.ts", "../../../../../node_modules/@lumino/collections/src/linkedlist.ts", "../../../../../node_modules/@lumino/messaging/node_modules/tslib/tslib.es6.js", "../../../../../node_modules/@lumino/messaging/src/index.ts", "../../../../../node_modules/@lumino/domutils/src/clipboard.ts", "../../../../../node_modules/@lumino/domutils/src/element.ts", "../../../../../node_modules/@lumino/domutils/src/platform.ts", "../../../../../node_modules/@lumino/domutils/src/selector.ts"],
  "sourcesContent": ["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * The namespace for array-specific algorithms.\n */\nexport namespace ArrayExt {\n  /**\n   * Find the index of the first occurrence of a value in an array.\n   *\n   * @param array - The array-like object to search.\n   *\n   * @param value - The value to locate in the array. Values are\n   *   compared using strict `===` equality.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the first occurrence of the value, or `-1`\n   *   if the value is not found.\n   *\n   * #### Notes\n   * If `stop < start` the search will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or `stop` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = ['one', 'two', 'three', 'four', 'one'];\n   * ArrayExt.firstIndexOf(data, 'red');        // -1\n   * ArrayExt.firstIndexOf(data, 'one');        // 0\n   * ArrayExt.firstIndexOf(data, 'one', 1);     // 4\n   * ArrayExt.firstIndexOf(data, 'two', 2);     // -1\n   * ArrayExt.firstIndexOf(data, 'two', 2, 1);  // 1\n   * ```\n   */\n  export function firstIndexOf<T>(\n    array: ArrayLike<T>,\n    value: T,\n    start = 0,\n    stop = -1\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return -1;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let span: number;\n    if (stop < start) {\n      span = stop + 1 + (n - start);\n    } else {\n      span = stop - start + 1;\n    }\n    for (let i = 0; i < span; ++i) {\n      let j = (start + i) % n;\n      if (array[j] === value) {\n        return j;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Find the index of the last occurrence of a value in an array.\n   *\n   * @param array - The array-like object to search.\n   *\n   * @param value - The value to locate in the array. Values are\n   *   compared using strict `===` equality.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the last occurrence of the value, or `-1`\n   *   if the value is not found.\n   *\n   * #### Notes\n   * If `start < stop` the search will wrap at the front of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or `stop` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = ['one', 'two', 'three', 'four', 'one'];\n   * ArrayExt.lastIndexOf(data, 'red');        // -1\n   * ArrayExt.lastIndexOf(data, 'one');        // 4\n   * ArrayExt.lastIndexOf(data, 'one', 1);     // 0\n   * ArrayExt.lastIndexOf(data, 'two', 0);     // -1\n   * ArrayExt.lastIndexOf(data, 'two', 0, 1);  // 1\n   * ```\n   */\n  export function lastIndexOf<T>(\n    array: ArrayLike<T>,\n    value: T,\n    start = -1,\n    stop = 0\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return -1;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let span: number;\n    if (start < stop) {\n      span = start + 1 + (n - stop);\n    } else {\n      span = start - stop + 1;\n    }\n    for (let i = 0; i < span; ++i) {\n      let j = (start - i + n) % n;\n      if (array[j] === value) {\n        return j;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Find the index of the first value which matches a predicate.\n   *\n   * @param array - The array-like object to search.\n   *\n   * @param fn - The predicate function to apply to the values.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the first matching value, or `-1` if no\n   *   matching value is found.\n   *\n   * #### Notes\n   * If `stop < start` the search will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or `stop` which is non-integral.\n   *\n   * Modifying the length of the array while searching.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function isEven(value: number): boolean {\n   *   return value % 2 === 0;\n   * }\n   *\n   * let data = [1, 2, 3, 4, 3, 2, 1];\n   * ArrayExt.findFirstIndex(data, isEven);       // 1\n   * ArrayExt.findFirstIndex(data, isEven, 4);    // 5\n   * ArrayExt.findFirstIndex(data, isEven, 6);    // -1\n   * ArrayExt.findFirstIndex(data, isEven, 6, 5); // 1\n   * ```\n   */\n  export function findFirstIndex<T>(\n    array: ArrayLike<T>,\n    fn: (value: T, index: number) => boolean,\n    start = 0,\n    stop = -1\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return -1;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let span: number;\n    if (stop < start) {\n      span = stop + 1 + (n - start);\n    } else {\n      span = stop - start + 1;\n    }\n    for (let i = 0; i < span; ++i) {\n      let j = (start + i) % n;\n      if (fn(array[j], j)) {\n        return j;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Find the index of the last value which matches a predicate.\n   *\n   * @param object - The array-like object to search.\n   *\n   * @param fn - The predicate function to apply to the values.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the last matching value, or `-1` if no\n   *   matching value is found.\n   *\n   * #### Notes\n   * If `start < stop` the search will wrap at the front of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or `stop` which is non-integral.\n   *\n   * Modifying the length of the array while searching.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function isEven(value: number): boolean {\n   *   return value % 2 === 0;\n   * }\n   *\n   * let data = [1, 2, 3, 4, 3, 2, 1];\n   * ArrayExt.findLastIndex(data, isEven);        // 5\n   * ArrayExt.findLastIndex(data, isEven, 4);     // 3\n   * ArrayExt.findLastIndex(data, isEven, 0);     // -1\n   * ArrayExt.findLastIndex(data, isEven, 0, 1);  // 5\n   * ```\n   */\n  export function findLastIndex<T>(\n    array: ArrayLike<T>,\n    fn: (value: T, index: number) => boolean,\n    start = -1,\n    stop = 0\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return -1;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let d: number;\n    if (start < stop) {\n      d = start + 1 + (n - stop);\n    } else {\n      d = start - stop + 1;\n    }\n    for (let i = 0; i < d; ++i) {\n      let j = (start - i + n) % n;\n      if (fn(array[j], j)) {\n        return j;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Find the first value which matches a predicate.\n   *\n   * @param array - The array-like object to search.\n   *\n   * @param fn - The predicate function to apply to the values.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The first matching value, or `undefined` if no matching\n   *   value is found.\n   *\n   * #### Notes\n   * If `stop < start` the search will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or `stop` which is non-integral.\n   *\n   * Modifying the length of the array while searching.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function isEven(value: number): boolean {\n   *   return value % 2 === 0;\n   * }\n   *\n   * let data = [1, 2, 3, 4, 3, 2, 1];\n   * ArrayExt.findFirstValue(data, isEven);       // 2\n   * ArrayExt.findFirstValue(data, isEven, 2);    // 4\n   * ArrayExt.findFirstValue(data, isEven, 6);    // undefined\n   * ArrayExt.findFirstValue(data, isEven, 6, 5); // 2\n   * ```\n   */\n  export function findFirstValue<T>(\n    array: ArrayLike<T>,\n    fn: (value: T, index: number) => boolean,\n    start = 0,\n    stop = -1\n  ): T | undefined {\n    let index = findFirstIndex(array, fn, start, stop);\n    return index !== -1 ? array[index] : undefined;\n  }\n\n  /**\n   * Find the last value which matches a predicate.\n   *\n   * @param object - The array-like object to search.\n   *\n   * @param fn - The predicate function to apply to the values.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The last matching value, or `undefined` if no matching\n   *   value is found.\n   *\n   * #### Notes\n   * If `start < stop` the search will wrap at the front of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or `stop` which is non-integral.\n   *\n   * Modifying the length of the array while searching.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function isEven(value: number): boolean {\n   *   return value % 2 === 0;\n   * }\n   *\n   * let data = [1, 2, 3, 4, 3, 2, 1];\n   * ArrayExt.findLastValue(data, isEven);        // 2\n   * ArrayExt.findLastValue(data, isEven, 4);     // 4\n   * ArrayExt.findLastValue(data, isEven, 0);     // undefined\n   * ArrayExt.findLastValue(data, isEven, 0, 1);  // 2\n   * ```\n   */\n  export function findLastValue<T>(\n    array: ArrayLike<T>,\n    fn: (value: T, index: number) => boolean,\n    start = -1,\n    stop = 0\n  ): T | undefined {\n    let index = findLastIndex(array, fn, start, stop);\n    return index !== -1 ? array[index] : undefined;\n  }\n\n  /**\n   * Find the index of the first element which compares `>=` to a value.\n   *\n   * @param array - The sorted array-like object to search.\n   *\n   * @param value - The value to locate in the array.\n   *\n   * @param fn - The 3-way comparison function to apply to the values.\n   *   It should return `< 0` if an element is less than a value, `0` if\n   *   an element is equal to a value, or `> 0` if an element is greater\n   *   than a value.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the first element which compares `>=` to the\n   *   value, or `length` if there is no such element. If the computed\n   *   index for `stop` is less than `start`, then the computed index\n   *   for `start` is returned.\n   *\n   * #### Notes\n   * The array must already be sorted in ascending order according to\n   * the comparison function.\n   *\n   * #### Complexity\n   * Logarithmic.\n   *\n   * #### Undefined Behavior\n   * Searching a range which is not sorted in ascending order.\n   *\n   * A `start` or `stop` which is non-integral.\n   *\n   * Modifying the length of the array while searching.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function numberCmp(a: number, b: number): number {\n   *   return a - b;\n   * }\n   *\n   * let data = [0, 3, 4, 7, 7, 9];\n   * ArrayExt.lowerBound(data, 0, numberCmp);   // 0\n   * ArrayExt.lowerBound(data, 6, numberCmp);   // 3\n   * ArrayExt.lowerBound(data, 7, numberCmp);   // 3\n   * ArrayExt.lowerBound(data, -1, numberCmp);  // 0\n   * ArrayExt.lowerBound(data, 10, numberCmp);  // 6\n   * ```\n   */\n  export function lowerBound<T, U>(\n    array: ArrayLike<T>,\n    value: U,\n    fn: (element: T, value: U) => number,\n    start = 0,\n    stop = -1\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return 0;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let begin = start;\n    let span = stop - start + 1;\n    while (span > 0) {\n      let half = span >> 1;\n      let middle = begin + half;\n      if (fn(array[middle], value) < 0) {\n        begin = middle + 1;\n        span -= half + 1;\n      } else {\n        span = half;\n      }\n    }\n    return begin;\n  }\n\n  /**\n   * Find the index of the first element which compares `>` than a value.\n   *\n   * @param array - The sorted array-like object to search.\n   *\n   * @param value - The value to locate in the array.\n   *\n   * @param fn - The 3-way comparison function to apply to the values.\n   *   It should return `< 0` if an element is less than a value, `0` if\n   *   an element is equal to a value, or `> 0` if an element is greater\n   *   than a value.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the first element which compares `>` than the\n   *   value, or `length` if there is no such element. If the computed\n   *   index for `stop` is less than `start`, then the computed index\n   *   for `start` is returned.\n   *\n   * #### Notes\n   * The array must already be sorted in ascending order according to\n   * the comparison function.\n   *\n   * #### Complexity\n   * Logarithmic.\n   *\n   * #### Undefined Behavior\n   * Searching a range which is not sorted in ascending order.\n   *\n   * A `start` or `stop` which is non-integral.\n   *\n   * Modifying the length of the array while searching.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function numberCmp(a: number, b: number): number {\n   *   return a - b;\n   * }\n   *\n   * let data = [0, 3, 4, 7, 7, 9];\n   * ArrayExt.upperBound(data, 0, numberCmp);   // 1\n   * ArrayExt.upperBound(data, 6, numberCmp);   // 3\n   * ArrayExt.upperBound(data, 7, numberCmp);   // 5\n   * ArrayExt.upperBound(data, -1, numberCmp);  // 0\n   * ArrayExt.upperBound(data, 10, numberCmp);  // 6\n   * ```\n   */\n  export function upperBound<T, U>(\n    array: ArrayLike<T>,\n    value: U,\n    fn: (element: T, value: U) => number,\n    start = 0,\n    stop = -1\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return 0;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let begin = start;\n    let span = stop - start + 1;\n    while (span > 0) {\n      let half = span >> 1;\n      let middle = begin + half;\n      if (fn(array[middle], value) > 0) {\n        span = half;\n      } else {\n        begin = middle + 1;\n        span -= half + 1;\n      }\n    }\n    return begin;\n  }\n\n  /**\n   * Test whether two arrays are shallowly equal.\n   *\n   * @param a - The first array-like object to compare.\n   *\n   * @param b - The second array-like object to compare.\n   *\n   * @param fn - The comparison function to apply to the elements. It\n   *   should return `true` if the elements are \"equal\". The default\n   *   compares elements using strict `===` equality.\n   *\n   * @returns Whether the two arrays are shallowly equal.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * Modifying the length of the arrays while comparing.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let d1 = [0, 3, 4, 7, 7, 9];\n   * let d2 = [0, 3, 4, 7, 7, 9];\n   * let d3 = [42];\n   * ArrayExt.shallowEqual(d1, d2);  // true\n   * ArrayExt.shallowEqual(d2, d3);  // false\n   * ```\n   */\n  export function shallowEqual<T>(\n    a: ArrayLike<T>,\n    b: ArrayLike<T>,\n    fn?: (a: T, b: T) => boolean\n  ): boolean {\n    // Check for object identity first.\n    if (a === b) {\n      return true;\n    }\n\n    // Bail early if the lengths are different.\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    // Compare each element for equality.\n    for (let i = 0, n = a.length; i < n; ++i) {\n      if (fn ? !fn(a[i], b[i]) : a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    // The array are shallowly equal.\n    return true;\n  }\n\n  /**\n   * Create a slice of an array subject to an optional step.\n   *\n   * @param array - The array-like object of interest.\n   *\n   * @param options - The options for configuring the slice.\n   *\n   * @returns A new array with the specified values.\n   *\n   * @throws An exception if the slice `step` is `0`.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start`, `stop`, or `step` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [0, 3, 4, 7, 7, 9];\n   * ArrayExt.slice(data);                         // [0, 3, 4, 7, 7, 9]\n   * ArrayExt.slice(data, { start: 2 });           // [4, 7, 7, 9]\n   * ArrayExt.slice(data, { start: 0, stop: 4 });  // [0, 3, 4, 7]\n   * ArrayExt.slice(data, { step: 2 });            // [0, 4, 7]\n   * ArrayExt.slice(data, { step: -1 });           // [9, 7, 7, 4, 3, 0]\n   * ```\n   */\n  export function slice<T>(\n    array: ArrayLike<T>,\n    options: slice.IOptions = {}\n  ): T[] {\n    // Extract the options.\n    let { start, stop, step } = options;\n\n    // Set up the `step` value.\n    if (step === undefined) {\n      step = 1;\n    }\n\n    // Validate the step size.\n    if (step === 0) {\n      throw new Error('Slice `step` cannot be zero.');\n    }\n\n    // Look up the length of the array.\n    let n = array.length;\n\n    // Set up the `start` value.\n    if (start === undefined) {\n      start = step < 0 ? n - 1 : 0;\n    } else if (start < 0) {\n      start = Math.max(start + n, step < 0 ? -1 : 0);\n    } else if (start >= n) {\n      start = step < 0 ? n - 1 : n;\n    }\n\n    // Set up the `stop` value.\n    if (stop === undefined) {\n      stop = step < 0 ? -1 : n;\n    } else if (stop < 0) {\n      stop = Math.max(stop + n, step < 0 ? -1 : 0);\n    } else if (stop >= n) {\n      stop = step < 0 ? n - 1 : n;\n    }\n\n    // Compute the slice length.\n    let length;\n    if ((step < 0 && stop >= start) || (step > 0 && start >= stop)) {\n      length = 0;\n    } else if (step < 0) {\n      length = Math.floor((stop - start + 1) / step + 1);\n    } else {\n      length = Math.floor((stop - start - 1) / step + 1);\n    }\n\n    // Compute the sliced result.\n    let result: T[] = [];\n    for (let i = 0; i < length; ++i) {\n      result[i] = array[start + i * step];\n    }\n\n    // Return the result.\n    return result;\n  }\n\n  /**\n   * The namespace for the `slice` function statics.\n   */\n  export namespace slice {\n    /**\n     * The options for the `slice` function.\n     */\n    export interface IOptions {\n      /**\n       * The starting index of the slice, inclusive.\n       *\n       * Negative values are taken as an offset from the end\n       * of the array.\n       *\n       * The default is `0` if `step > 0` else `n - 1`.\n       */\n      start?: number;\n\n      /**\n       * The stopping index of the slice, exclusive.\n       *\n       * Negative values are taken as an offset from the end\n       * of the array.\n       *\n       * The default is `n` if `step > 0` else `-n - 1`.\n       */\n      stop?: number;\n\n      /**\n       * The step value for the slice.\n       *\n       * This must not be `0`.\n       *\n       * The default is `1`.\n       */\n      step?: number;\n    }\n  }\n\n  /**\n   * An array-like object which supports item assignment.\n   */\n  export type MutableArrayLike<T> = {\n    readonly length: number;\n    [index: number]: T;\n  };\n\n  /**\n   * Move an element in an array from one index to another.\n   *\n   * @param array - The mutable array-like object of interest.\n   *\n   * @param fromIndex - The index of the element to move. Negative\n   *   values are taken as an offset from the end of the array.\n   *\n   * @param toIndex - The target index of the element. Negative\n   *   values are taken as an offset from the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `fromIndex` or `toIndex` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from from '@lumino/algorithm';\n   *\n   * let data = [0, 1, 2, 3, 4];\n   * ArrayExt.move(data, 1, 2);  // [0, 2, 1, 3, 4]\n   * ArrayExt.move(data, 4, 2);  // [0, 2, 4, 1, 3]\n   * ```\n   */\n  export function move<T>(\n    array: MutableArrayLike<T>,\n    fromIndex: number,\n    toIndex: number\n  ): void {\n    let n = array.length;\n    if (n <= 1) {\n      return;\n    }\n    if (fromIndex < 0) {\n      fromIndex = Math.max(0, fromIndex + n);\n    } else {\n      fromIndex = Math.min(fromIndex, n - 1);\n    }\n    if (toIndex < 0) {\n      toIndex = Math.max(0, toIndex + n);\n    } else {\n      toIndex = Math.min(toIndex, n - 1);\n    }\n    if (fromIndex === toIndex) {\n      return;\n    }\n    let value = array[fromIndex];\n    let d = fromIndex < toIndex ? 1 : -1;\n    for (let i = fromIndex; i !== toIndex; i += d) {\n      array[i] = array[i + d];\n    }\n    array[toIndex] = value;\n  }\n\n  /**\n   * Reverse an array in-place.\n   *\n   * @param array - The mutable array-like object of interest.\n   *\n   * @param start - The index of the first element in the range to be\n   *   reversed, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   reversed, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or  `stop` index which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [0, 1, 2, 3, 4];\n   * ArrayExt.reverse(data, 1, 3);  // [0, 3, 2, 1, 4]\n   * ArrayExt.reverse(data, 3);     // [0, 3, 2, 4, 1]\n   * ArrayExt.reverse(data);        // [1, 4, 2, 3, 0]\n   * ```\n   */\n  export function reverse<T>(\n    array: MutableArrayLike<T>,\n    start = 0,\n    stop = -1\n  ): void {\n    let n = array.length;\n    if (n <= 1) {\n      return;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    while (start < stop) {\n      let a = array[start];\n      let b = array[stop];\n      array[start++] = b;\n      array[stop--] = a;\n    }\n  }\n\n  /**\n   * Rotate the elements of an array in-place.\n   *\n   * @param array - The mutable array-like object of interest.\n   *\n   * @param delta - The amount of rotation to apply to the elements. A\n   *   positive value will rotate the elements to the left. A negative\n   *   value will rotate the elements to the right.\n   *\n   * @param start - The index of the first element in the range to be\n   *   rotated, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   rotated, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `delta`, `start`, or `stop` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [0, 1, 2, 3, 4];\n   * ArrayExt.rotate(data, 2);        // [2, 3, 4, 0, 1]\n   * ArrayExt.rotate(data, -2);       // [0, 1, 2, 3, 4]\n   * ArrayExt.rotate(data, 10);       // [0, 1, 2, 3, 4]\n   * ArrayExt.rotate(data, 9);        // [4, 0, 1, 2, 3]\n   * ArrayExt.rotate(data, 2, 1, 3);  // [4, 2, 0, 1, 3]\n   * ```\n   */\n  export function rotate<T>(\n    array: MutableArrayLike<T>,\n    delta: number,\n    start = 0,\n    stop = -1\n  ): void {\n    let n = array.length;\n    if (n <= 1) {\n      return;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    if (start >= stop) {\n      return;\n    }\n    let length = stop - start + 1;\n    if (delta > 0) {\n      delta = delta % length;\n    } else if (delta < 0) {\n      delta = ((delta % length) + length) % length;\n    }\n    if (delta === 0) {\n      return;\n    }\n    let pivot = start + delta;\n    reverse(array, start, pivot - 1);\n    reverse(array, pivot, stop);\n    reverse(array, start, stop);\n  }\n\n  /**\n   * Fill an array with a static value.\n   *\n   * @param array - The mutable array-like object to fill.\n   *\n   * @param value - The static value to use to fill the array.\n   *\n   * @param start - The index of the first element in the range to be\n   *   filled, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   filled, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * #### Notes\n   * If `stop < start` the fill will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * A `start` or `stop` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = ['one', 'two', 'three', 'four'];\n   * ArrayExt.fill(data, 'r');        // ['r', 'r', 'r', 'r']\n   * ArrayExt.fill(data, 'g', 1);     // ['r', 'g', 'g', 'g']\n   * ArrayExt.fill(data, 'b', 2, 3);  // ['r', 'g', 'b', 'b']\n   * ArrayExt.fill(data, 'z', 3, 1);  // ['z', 'z', 'b', 'z']\n   * ```\n   */\n  export function fill<T>(\n    array: MutableArrayLike<T>,\n    value: T,\n    start = 0,\n    stop = -1\n  ): void {\n    let n = array.length;\n    if (n === 0) {\n      return;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let span: number;\n    if (stop < start) {\n      span = stop + 1 + (n - start);\n    } else {\n      span = stop - start + 1;\n    }\n    for (let i = 0; i < span; ++i) {\n      array[(start + i) % n] = value;\n    }\n  }\n\n  /**\n   * Insert a value into an array at a specific index.\n   *\n   * @param array - The array of interest.\n   *\n   * @param index - The index at which to insert the value. Negative\n   *   values are taken as an offset from the end of the array.\n   *\n   * @param value - The value to set at the specified index.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [0, 1, 2];\n   * ArrayExt.insert(data, 0, -1);  // [-1, 0, 1, 2]\n   * ArrayExt.insert(data, 2, 12);  // [-1, 0, 12, 1, 2]\n   * ArrayExt.insert(data, -1, 7);  // [-1, 0, 12, 1, 7, 2]\n   * ArrayExt.insert(data, 6, 19);  // [-1, 0, 12, 1, 7, 2, 19]\n   * ```\n   */\n  export function insert<T>(array: Array<T>, index: number, value: T): void {\n    let n = array.length;\n    if (index < 0) {\n      index = Math.max(0, index + n);\n    } else {\n      index = Math.min(index, n);\n    }\n    for (let i = n; i > index; --i) {\n      array[i] = array[i - 1];\n    }\n    array[index] = value;\n  }\n\n  /**\n   * Remove and return a value at a specific index in an array.\n   *\n   * @param array - The array of interest.\n   *\n   * @param index - The index of the value to remove. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The value at the specified index, or `undefined` if the\n   *   index is out of range.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [0, 12, 23, 39, 14, 12, 75];\n   * ArrayExt.removeAt(data, 2);   // 23\n   * ArrayExt.removeAt(data, -2);  // 12\n   * ArrayExt.removeAt(data, 10);  // undefined;\n   * ```\n   */\n  export function removeAt<T>(array: Array<T>, index: number): T | undefined {\n    let n = array.length;\n    if (index < 0) {\n      index += n;\n    }\n    if (index < 0 || index >= n) {\n      return undefined;\n    }\n    let value = array[index];\n    for (let i = index + 1; i < n; ++i) {\n      array[i - 1] = array[i];\n    }\n    array.length = n - 1;\n    return value;\n  }\n\n  /**\n   * Remove the first occurrence of a value from an array.\n   *\n   * @param array - The array of interest.\n   *\n   * @param value - The value to remove from the array. Values are\n   *   compared using strict `===` equality.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the removed value, or `-1` if the value\n   *   is not contained in the array.\n   *\n   * #### Notes\n   * If `stop < start` the search will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [0, 12, 23, 39, 14, 12, 75];\n   * ArrayExt.removeFirstOf(data, 12);        // 1\n   * ArrayExt.removeFirstOf(data, 17);        // -1\n   * ArrayExt.removeFirstOf(data, 39, 3);     // -1\n   * ArrayExt.removeFirstOf(data, 39, 3, 2);  // 2\n   * ```\n   */\n  export function removeFirstOf<T>(\n    array: Array<T>,\n    value: T,\n    start = 0,\n    stop = -1\n  ): number {\n    let index = firstIndexOf(array, value, start, stop);\n    if (index !== -1) {\n      removeAt(array, index);\n    }\n    return index;\n  }\n\n  /**\n   * Remove the last occurrence of a value from an array.\n   *\n   * @param array - The array of interest.\n   *\n   * @param value - The value to remove from the array. Values are\n   *   compared using strict `===` equality.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The index of the removed value, or `-1` if the value\n   *   is not contained in the array.\n   *\n   * #### Notes\n   * If `start < stop` the search will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [0, 12, 23, 39, 14, 12, 75];\n   * ArrayExt.removeLastOf(data, 12);        // 5\n   * ArrayExt.removeLastOf(data, 17);        // -1\n   * ArrayExt.removeLastOf(data, 39, 2);     // -1\n   * ArrayExt.removeLastOf(data, 39, 2, 3);  // 3\n   * ```\n   */\n  export function removeLastOf<T>(\n    array: Array<T>,\n    value: T,\n    start = -1,\n    stop = 0\n  ): number {\n    let index = lastIndexOf(array, value, start, stop);\n    if (index !== -1) {\n      removeAt(array, index);\n    }\n    return index;\n  }\n\n  /**\n   * Remove all occurrences of a value from an array.\n   *\n   * @param array - The array of interest.\n   *\n   * @param value - The value to remove from the array. Values are\n   *   compared using strict `===` equality.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The number of elements removed from the array.\n   *\n   * #### Notes\n   * If `stop < start` the search will conceptually wrap at the end of\n   * the array, however the array will be traversed front-to-back.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * let data = [14, 12, 23, 39, 14, 12, 19, 14];\n   * ArrayExt.removeAllOf(data, 12);        // 2\n   * ArrayExt.removeAllOf(data, 17);        // 0\n   * ArrayExt.removeAllOf(data, 14, 1, 4);  // 1\n   * ```\n   */\n  export function removeAllOf<T>(\n    array: Array<T>,\n    value: T,\n    start = 0,\n    stop = -1\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return 0;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; ++i) {\n      if (start <= stop && i >= start && i <= stop && array[i] === value) {\n        count++;\n      } else if (\n        stop < start &&\n        (i <= stop || i >= start) &&\n        array[i] === value\n      ) {\n        count++;\n      } else if (count > 0) {\n        array[i - count] = array[i];\n      }\n    }\n    if (count > 0) {\n      array.length = n - count;\n    }\n    return count;\n  }\n\n  /**\n   * Remove the first occurrence of a value which matches a predicate.\n   *\n   * @param array - The array of interest.\n   *\n   * @param fn - The predicate function to apply to the values.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The removed `{ index, value }`, which will be `-1` and\n   *   `undefined` if the value is not contained in the array.\n   *\n   * #### Notes\n   * If `stop < start` the search will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function isEven(value: number): boolean {\n   *   return value % 2 === 0;\n   * }\n   *\n   * let data = [0, 12, 23, 39, 14, 12, 75];\n   * ArrayExt.removeFirstWhere(data, isEven);     // { index: 0, value: 0 }\n   * ArrayExt.removeFirstWhere(data, isEven, 2);  // { index: 3, value: 14 }\n   * ArrayExt.removeFirstWhere(data, isEven, 4);  // { index: -1, value: undefined }\n   * ```\n   */\n  export function removeFirstWhere<T>(\n    array: Array<T>,\n    fn: (value: T, index: number) => boolean,\n    start = 0,\n    stop = -1\n  ): { index: number; value: T | undefined } {\n    let value: T | undefined;\n    let index = findFirstIndex(array, fn, start, stop);\n    if (index !== -1) {\n      value = removeAt(array, index);\n    }\n    return { index, value };\n  }\n\n  /**\n   * Remove the last occurrence of a value which matches a predicate.\n   *\n   * @param array - The array of interest.\n   *\n   * @param fn - The predicate function to apply to the values.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The removed `{ index, value }`, which will be `-1` and\n   *   `undefined` if the value is not contained in the array.\n   *\n   * #### Notes\n   * If `start < stop` the search will wrap at the end of the array.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function isEven(value: number): boolean {\n   *   return value % 2 === 0;\n   * }\n   *\n   * let data = [0, 12, 23, 39, 14, 12, 75];\n   * ArrayExt.removeLastWhere(data, isEven);        // { index: 5, value: 12 }\n   * ArrayExt.removeLastWhere(data, isEven, 2);     // { index: 1, value: 12 }\n   * ArrayExt.removeLastWhere(data, isEven, 2, 1);  // { index: -1, value: undefined }\n   * ```\n   */\n  export function removeLastWhere<T>(\n    array: Array<T>,\n    fn: (value: T, index: number) => boolean,\n    start = -1,\n    stop = 0\n  ): { index: number; value: T | undefined } {\n    let value: T | undefined;\n    let index = findLastIndex(array, fn, start, stop);\n    if (index !== -1) {\n      value = removeAt(array, index);\n    }\n    return { index, value };\n  }\n\n  /**\n   * Remove all occurrences of values which match a predicate.\n   *\n   * @param array - The array of interest.\n   *\n   * @param fn - The predicate function to apply to the values.\n   *\n   * @param start - The index of the first element in the range to be\n   *   searched, inclusive. The default value is `0`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @param stop - The index of the last element in the range to be\n   *   searched, inclusive. The default value is `-1`. Negative values\n   *   are taken as an offset from the end of the array.\n   *\n   * @returns The number of elements removed from the array.\n   *\n   * #### Notes\n   * If `stop < start` the search will conceptually wrap at the end of\n   * the array, however the array will be traversed front-to-back.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Example\n   * ```typescript\n   * import { ArrayExt } from '@lumino/algorithm';\n   *\n   * function isEven(value: number): boolean {\n   *   return value % 2 === 0;\n   * }\n   *\n   * function isNegative(value: number): boolean {\n   *   return value < 0;\n   * }\n   *\n   * let data = [0, 12, -13, -9, 23, 39, 14, -15, 12, 75];\n   * ArrayExt.removeAllWhere(data, isEven);            // 4\n   * ArrayExt.removeAllWhere(data, isNegative, 0, 3);  // 2\n   * ```\n   */\n  export function removeAllWhere<T>(\n    array: Array<T>,\n    fn: (value: T, index: number) => boolean,\n    start = 0,\n    stop = -1\n  ): number {\n    let n = array.length;\n    if (n === 0) {\n      return 0;\n    }\n    if (start < 0) {\n      start = Math.max(0, start + n);\n    } else {\n      start = Math.min(start, n - 1);\n    }\n    if (stop < 0) {\n      stop = Math.max(0, stop + n);\n    } else {\n      stop = Math.min(stop, n - 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; ++i) {\n      if (start <= stop && i >= start && i <= stop && fn(array[i], i)) {\n        count++;\n      } else if (stop < start && (i <= stop || i >= start) && fn(array[i], i)) {\n        count++;\n      } else if (count > 0) {\n        array[i - count] = array[i];\n      }\n    }\n    if (count > 0) {\n      array.length = n - count;\n    }\n    return count;\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * An object which can produce an iterator over its values.\n */\nexport interface IIterable<T> {\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   *\n   * #### Notes\n   * Depending on the iterable, the returned iterator may or may not be\n   * a new object. A collection or other container-like object should\n   * typically return a new iterator, while an iterator itself should\n   * normally return `this`.\n   */\n  iter(): IIterator<T>;\n}\n\n/**\n * An object which traverses a collection of values.\n *\n * #### Notes\n * An `IIterator` is itself an `IIterable`. Most implementations of\n * `IIterator` should simply return `this` from the `iter()` method.\n */\nexport interface IIterator<T> extends IIterable<T> {\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   *\n   * #### Notes\n   * The cloned iterator can be consumed independently of the current\n   * iterator. In essence, it is a copy of the iterator value stream\n   * which starts at the current location.\n   *\n   * This can be useful for lookahead and stream duplication.\n   */\n  clone(): IIterator<T>;\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   *\n   * #### Notes\n   * The `undefined` value is used to signal the end of iteration and\n   * should therefore not be used as a value in a collection.\n   *\n   * The use of the `undefined` sentinel is an explicit design choice\n   * which favors performance over purity. The ES6 iterator design of\n   * returning a `{ value, done }` pair is suboptimal, as it requires\n   * an object allocation on each iteration; and an `isDone()` method\n   * would increase implementation and runtime complexity.\n   */\n  next(): T | undefined;\n}\n\n/**\n * A type alias for an iterable or builtin array-like object.\n */\nexport type IterableOrArrayLike<T> = IIterable<T> | ArrayLike<T>;\n\n/**\n * Create an iterator for an iterable object.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @returns A new iterator for the given object.\n *\n * #### Notes\n * This function allows iteration algorithms to operate on user-defined\n * iterable types and builtin array-like objects in a uniform fashion.\n */\nexport function iter<T>(object: IterableOrArrayLike<T>): IIterator<T> {\n  let it: IIterator<T>;\n  if (typeof (object as any).iter === 'function') {\n    it = (object as IIterable<T>).iter();\n  } else {\n    it = new ArrayIterator<T>(object as ArrayLike<T>);\n  }\n  return it;\n}\n\n/**\n * Create an iterator for the keys in an object.\n *\n * @param object - The object of interest.\n *\n * @returns A new iterator for the keys in the given object.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { each, keys } from '@lumino/algorithm';\n *\n * let data = { one: 1, two: 2, three: 3 };\n *\n * each(keys(data), key => { console.log(key); }); // 'one', 'two', 'three'\n * ```\n */\nexport function iterKeys<T>(object: {\n  readonly [key: string]: T;\n}): IIterator<string> {\n  return new KeyIterator(object);\n}\n\n/**\n * Create an iterator for the values in an object.\n *\n * @param object - The object of interest.\n *\n * @returns A new iterator for the values in the given object.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { each, values } from '@lumino/algorithm';\n *\n * let data = { one: 1, two: 2, three: 3 };\n *\n * each(values(data), value => { console.log(value); }); // 1, 2, 3\n * ```\n */\nexport function iterValues<T>(object: {\n  readonly [key: string]: T;\n}): IIterator<T> {\n  return new ValueIterator<T>(object);\n}\n\n/**\n * Create an iterator for the items in an object.\n *\n * @param object - The object of interest.\n *\n * @returns A new iterator for the items in the given object.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { each, items } from '@lumino/algorithm';\n *\n * let data = { one: 1, two: 2, three: 3 };\n *\n * each(items(data), value => { console.log(value); }); // ['one', 1], ['two', 2], ['three', 3]\n * ```\n */\nexport function iterItems<T>(object: {\n  readonly [key: string]: T;\n}): IIterator<[string, T]> {\n  return new ItemIterator<T>(object);\n}\n\n/**\n * Create an iterator for an iterator-like function.\n *\n * @param fn - A function which behaves like an iterator `next` method.\n *\n * @returns A new iterator for the given function.\n *\n * #### Notes\n * The returned iterator **cannot** be cloned.\n *\n * #### Example\n * ```typescript\n * import { each, iterFn } from '@lumino/algorithm';\n *\n * let it = iterFn((() => {\n *   let i = 0;\n *   return () => i > 3 ? undefined : i++;\n * })());\n *\n * each(it, v => { console.log(v); }); // 0, 1, 2, 3\n * ```\n */\nexport function iterFn<T>(fn: () => T | undefined): IIterator<T> {\n  return new FnIterator<T>(fn);\n}\n\n/**\n * Invoke a function for each value in an iterable.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param fn - The callback function to invoke for each value.\n *\n * #### Notes\n * Iteration can be terminated early by returning `false` from the\n * callback function.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { each } from '@lumino/algorithm';\n *\n * let data = [5, 7, 0, -2, 9];\n *\n * each(data, value => { console.log(value); });\n * ```\n */\nexport function each<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (value: T, index: number) => boolean | void\n): void {\n  let index = 0;\n  let it = iter(object);\n  let value: T | undefined;\n  while ((value = it.next()) !== undefined) {\n    if (fn(value, index++) === false) {\n      return;\n    }\n  }\n}\n\n/**\n * Test whether all values in an iterable satisfy a predicate.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param fn - The predicate function to invoke for each value.\n *\n * @returns `true` if all values pass the test, `false` otherwise.\n *\n * #### Notes\n * Iteration terminates on the first `false` predicate result.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { every } from '@lumino/algorithm';\n *\n * let data = [5, 7, 1];\n *\n * every(data, value => value % 2 === 0);  // false\n * every(data, value => value % 2 === 1);  // true\n * ```\n */\nexport function every<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (value: T, index: number) => boolean\n): boolean {\n  let index = 0;\n  let it = iter(object);\n  let value: T | undefined;\n  while ((value = it.next()) !== undefined) {\n    if (!fn(value, index++)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Test whether any value in an iterable satisfies a predicate.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param fn - The predicate function to invoke for each value.\n *\n * @returns `true` if any value passes the test, `false` otherwise.\n *\n * #### Notes\n * Iteration terminates on the first `true` predicate result.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { some } from '@lumino/algorithm';\n *\n * let data = [5, 7, 1];\n *\n * some(data, value => value === 7);  // true\n * some(data, value => value === 3);  // false\n * ```\n */\nexport function some<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (value: T, index: number) => boolean\n): boolean {\n  let index = 0;\n  let it = iter(object);\n  let value: T | undefined;\n  while ((value = it.next()) !== undefined) {\n    if (fn(value, index++)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Create an array from an iterable of values.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @returns A new array of values from the given object.\n *\n * #### Example\n * ```typescript\n * import { iter, toArray } from '@lumino/algorithm';\n *\n * let data = [1, 2, 3, 4, 5, 6];\n *\n * let stream = iter(data);\n *\n * toArray(stream);  // [1, 2, 3, 4, 5, 6];\n * ```\n */\nexport function toArray<T>(object: IterableOrArrayLike<T>): T[] {\n  let index = 0;\n  let result: T[] = [];\n  let it = iter(object);\n  let value: T | undefined;\n  while ((value = it.next()) !== undefined) {\n    result[index++] = value;\n  }\n  return result;\n}\n\n/**\n * Create an object from an iterable of key/value pairs.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @returns A new object mapping keys to values.\n *\n * #### Example\n * ```typescript\n * import { toObject } from '@lumino/algorithm';\n *\n * let data = [['one', 1], ['two', 2], ['three', 3]];\n *\n * toObject(data);  // { one: 1, two: 2, three: 3 }\n * ```\n */\nexport function toObject<T>(\n  object: IterableOrArrayLike<[string, T]>\n): { [key: string]: T } {\n  let it = iter(object);\n  let pair: [string, T] | undefined;\n  let result: { [key: string]: T } = {};\n  while ((pair = it.next()) !== undefined) {\n    result[pair[0]] = pair[1];\n  }\n  return result;\n}\n\n/**\n * An iterator for an array-like object.\n *\n * #### Notes\n * This iterator can be used for any builtin JS array-like object.\n */\nexport class ArrayIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new array iterator.\n   *\n   * @param source - The array-like object of interest.\n   */\n  constructor(source: ArrayLike<T>) {\n    this._source = source;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    let result = new ArrayIterator<T>(this._source);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    if (this._index >= this._source.length) {\n      return undefined;\n    }\n    return this._source[this._index++];\n  }\n\n  private _index = 0;\n  private _source: ArrayLike<T>;\n}\n\n/**\n * An iterator for the keys in an object.\n *\n * #### Notes\n * This iterator can be used for any JS object.\n */\nexport class KeyIterator implements IIterator<string> {\n  /**\n   * Construct a new key iterator.\n   *\n   * @param source - The object of interest.\n   *\n   * @param keys - The keys to iterate, if known.\n   */\n  constructor(\n    source: { readonly [key: string]: any },\n    keys = Object.keys(source)\n  ) {\n    this._source = source;\n    this._keys = keys;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<string> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<string> {\n    let result = new KeyIterator(this._source, this._keys);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): string | undefined {\n    if (this._index >= this._keys.length) {\n      return undefined;\n    }\n    let key = this._keys[this._index++];\n    if (key in this._source) {\n      return key;\n    }\n    return this.next();\n  }\n\n  private _index = 0;\n  private _keys: string[];\n  private _source: { readonly [key: string]: any };\n}\n\n/**\n * An iterator for the values in an object.\n *\n * #### Notes\n * This iterator can be used for any JS object.\n */\nexport class ValueIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new value iterator.\n   *\n   * @param source - The object of interest.\n   *\n   * @param keys - The keys to iterate, if known.\n   */\n  constructor(\n    source: { readonly [key: string]: T },\n    keys = Object.keys(source)\n  ) {\n    this._source = source;\n    this._keys = keys;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    let result = new ValueIterator<T>(this._source, this._keys);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    if (this._index >= this._keys.length) {\n      return undefined;\n    }\n    let key = this._keys[this._index++];\n    if (key in this._source) {\n      return this._source[key];\n    }\n    return this.next();\n  }\n\n  private _index = 0;\n  private _keys: string[];\n  private _source: { readonly [key: string]: T };\n}\n\n/**\n * An iterator for the items in an object.\n *\n * #### Notes\n * This iterator can be used for any JS object.\n */\nexport class ItemIterator<T> implements IIterator<[string, T]> {\n  /**\n   * Construct a new item iterator.\n   *\n   * @param source - The object of interest.\n   *\n   * @param keys - The keys to iterate, if known.\n   */\n  constructor(\n    source: { readonly [key: string]: T },\n    keys = Object.keys(source)\n  ) {\n    this._source = source;\n    this._keys = keys;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<[string, T]> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<[string, T]> {\n    let result = new ItemIterator<T>(this._source, this._keys);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): [string, T] | undefined {\n    if (this._index >= this._keys.length) {\n      return undefined;\n    }\n    let key = this._keys[this._index++];\n    if (key in this._source) {\n      return [key, this._source[key]];\n    }\n    return this.next();\n  }\n\n  private _index = 0;\n  private _keys: string[];\n  private _source: { readonly [key: string]: T };\n}\n\n/**\n * An iterator for an iterator-like function.\n */\nexport class FnIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new function iterator.\n   *\n   * @param fn - The iterator-like function of interest.\n   */\n  constructor(fn: () => T | undefined) {\n    this._fn = fn;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    throw new Error('An `FnIterator` cannot be cloned.');\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    return this._fn.call(undefined);\n  }\n\n  private _fn: () => T | undefined;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator, iter, IterableOrArrayLike } from './iter';\n\n/**\n * Chain together several iterables.\n *\n * @param objects - The iterable or array-like objects of interest.\n *\n * @returns An iterator which yields the values of the iterables\n *   in the order in which they are supplied.\n *\n * #### Example\n * ```typescript\n * import { chain, toArray } from '@lumino/algorithm';\n *\n * let data1 = [1, 2, 3];\n * let data2 = [4, 5, 6];\n *\n * let stream = chain(data1, data2);\n *\n * toArray(stream);  // [1, 2, 3, 4, 5, 6]\n * ```\n */\nexport function chain<T>(...objects: IterableOrArrayLike<T>[]): IIterator<T> {\n  return new ChainIterator<T>(iter(objects.map(iter)));\n}\n\n/**\n * An iterator which chains together several iterators.\n */\nexport class ChainIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new chain iterator.\n   *\n   * @param source - The iterator of iterators of interest.\n   */\n  constructor(source: IIterator<IIterator<T>>) {\n    this._source = source;\n    this._active = undefined;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    let result = new ChainIterator<T>(this._source.clone());\n    result._active = this._active && this._active.clone();\n    result._cloned = true;\n    this._cloned = true;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    if (this._active === undefined) {\n      let active = this._source.next();\n      if (active === undefined) {\n        return undefined;\n      }\n      this._active = this._cloned ? active.clone() : active;\n    }\n    let value = this._active.next();\n    if (value !== undefined) {\n      return value;\n    }\n    this._active = undefined;\n    return this.next();\n  }\n\n  private _source: IIterator<IIterator<T>>;\n  private _active: IIterator<T> | undefined;\n  private _cloned = false;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator } from './iter';\n\n/**\n * Create an empty iterator.\n *\n * @returns A new iterator which yields nothing.\n *\n * #### Example\n * ```typescript\n * import { empty, toArray } from '@lumino/algorithm';\n *\n * let stream = empty<number>();\n *\n * toArray(stream);  // []\n * ```\n */\nexport function empty<T>(): IIterator<T> {\n  return new EmptyIterator<T>();\n}\n\n/**\n * An iterator which is always empty.\n */\nexport class EmptyIterator<T> implements IIterator<T> {\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    return new EmptyIterator<T>();\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    return undefined;\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator, iter, IterableOrArrayLike } from './iter';\n\n/**\n * Enumerate an iterable object.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param start - The starting enum value. The default is `0`.\n *\n * @returns An iterator which yields the enumerated values.\n *\n * #### Example\n * ```typescript\n * import { enumerate, toArray } from '@lumino/algorithm';\n *\n * let data = ['foo', 'bar', 'baz'];\n *\n * let stream = enumerate(data, 1);\n *\n * toArray(stream);  // [[1, 'foo'], [2, 'bar'], [3, 'baz']]\n * ```\n */\nexport function enumerate<T>(\n  object: IterableOrArrayLike<T>,\n  start = 0\n): IIterator<[number, T]> {\n  return new EnumerateIterator<T>(iter(object), start);\n}\n\n/**\n * An iterator which enumerates the source values.\n */\nexport class EnumerateIterator<T> implements IIterator<[number, T]> {\n  /**\n   * Construct a new enumerate iterator.\n   *\n   * @param source - The iterator of values of interest.\n   *\n   * @param start - The starting enum value.\n   */\n  constructor(source: IIterator<T>, start: number) {\n    this._source = source;\n    this._index = start;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<[number, T]> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<[number, T]> {\n    return new EnumerateIterator<T>(this._source.clone(), this._index);\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): [number, T] | undefined {\n    let value = this._source.next();\n    if (value === undefined) {\n      return undefined;\n    }\n    return [this._index++, value];\n  }\n\n  private _source: IIterator<T>;\n  private _index: number;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator, iter, IterableOrArrayLike } from './iter';\n\n/**\n * Filter an iterable for values which pass a test.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param fn - The predicate function to invoke for each value.\n *\n * @returns An iterator which yields the values which pass the test.\n *\n * #### Example\n * ```typescript\n * import { filter, toArray } from '@lumino/algorithm';\n *\n * let data = [1, 2, 3, 4, 5, 6];\n *\n * let stream = filter(data, value => value % 2 === 0);\n *\n * toArray(stream);  // [2, 4, 6]\n * ```\n */\nexport function filter<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (value: T, index: number) => boolean\n): IIterator<T> {\n  return new FilterIterator<T>(iter(object), fn);\n}\n\n/**\n * An iterator which yields values which pass a test.\n */\nexport class FilterIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new filter iterator.\n   *\n   * @param source - The iterator of values of interest.\n   *\n   * @param fn - The predicate function to invoke for each value.\n   */\n  constructor(source: IIterator<T>, fn: (value: T, index: number) => boolean) {\n    this._source = source;\n    this._fn = fn;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    let result = new FilterIterator<T>(this._source.clone(), this._fn);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    let fn = this._fn;\n    let it = this._source;\n    let value: T | undefined;\n    while ((value = it.next()) !== undefined) {\n      if (fn(value, this._index++)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  private _index = 0;\n  private _source: IIterator<T>;\n  private _fn: (value: T, index: number) => boolean;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { iter, IterableOrArrayLike } from './iter';\n\n/**\n * Find the first value in an iterable which matches a predicate.\n *\n * @param object - The iterable or array-like object to search.\n *\n * @param fn - The predicate function to apply to the values.\n *\n * @returns The first matching value, or `undefined` if no matching\n *   value is found.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { find } from '@lumino/algorithm';\n *\n * interface IAnimal { species: string, name: string };\n *\n * function isCat(value: IAnimal): boolean {\n *   return value.species === 'cat';\n * }\n *\n * let data: IAnimal[] = [\n *   { species: 'dog', name: 'spot' },\n *   { species: 'cat', name: 'fluffy' },\n *   { species: 'alligator', name: 'pocho' }\n * ];\n *\n * find(data, isCat).name;  // 'fluffy'\n * ```\n */\nexport function find<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (value: T, index: number) => boolean\n): T | undefined {\n  let index = 0;\n  let it = iter(object);\n  let value: T | undefined;\n  while ((value = it.next()) !== undefined) {\n    if (fn(value, index++)) {\n      return value;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Find the index of the first value which matches a predicate.\n *\n * @param object - The iterable or array-like object to search.\n *\n * @param fn - The predicate function to apply to the values.\n *\n * @returns The index of the first matching value, or `-1` if no\n *   matching value is found.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { findIndex } from '@lumino/algorithm';\n *\n * interface IAnimal { species: string, name: string };\n *\n * function isCat(value: IAnimal): boolean {\n *   return value.species === 'cat';\n * }\n *\n * let data: IAnimal[] = [\n *   { species: 'dog', name: 'spot' },\n *   { species: 'cat', name: 'fluffy' },\n *   { species: 'alligator', name: 'pocho' }\n * ];\n *\n * findIndex(data, isCat);  // 1\n * ```\n */\nexport function findIndex<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (value: T, index: number) => boolean\n): number {\n  let index = 0;\n  let it = iter(object);\n  let value: T | undefined;\n  while ((value = it.next()) !== undefined) {\n    if (fn(value, index++)) {\n      return index - 1;\n    }\n  }\n  return -1;\n}\n\n/**\n * Find the minimum value in an iterable.\n *\n * @param object - The iterable or array-like object to search.\n *\n * @param fn - The 3-way comparison function to apply to the values.\n *   It should return `< 0` if the first value is less than the second.\n *   `0` if the values are equivalent, or `> 0` if the first value is\n *   greater than the second.\n *\n * @returns The minimum value in the iterable. If multiple values are\n *   equivalent to the minimum, the left-most value is returned. If\n *   the iterable is empty, this returns `undefined`.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { min } from '@lumino/algorithm';\n *\n * function numberCmp(a: number, b: number): number {\n *   return a - b;\n * }\n *\n * min([7, 4, 0, 3, 9, 4], numberCmp);  // 0\n * ```\n */\nexport function min<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (first: T, second: T) => number\n): T | undefined {\n  let it = iter(object);\n  let value = it.next();\n  if (value === undefined) {\n    return undefined;\n  }\n  let result = value;\n  while ((value = it.next()) !== undefined) {\n    if (fn(value, result) < 0) {\n      result = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Find the maximum value in an iterable.\n *\n * @param object - The iterable or array-like object to search.\n *\n * @param fn - The 3-way comparison function to apply to the values.\n *   It should return `< 0` if the first value is less than the second.\n *   `0` if the values are equivalent, or `> 0` if the first value is\n *   greater than the second.\n *\n * @returns The maximum value in the iterable. If multiple values are\n *   equivalent to the maximum, the left-most value is returned. If\n *   the iterable is empty, this returns `undefined`.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { max } from '@lumino/algorithm';\n *\n * function numberCmp(a: number, b: number): number {\n *   return a - b;\n * }\n *\n * max([7, 4, 0, 3, 9, 4], numberCmp);  // 9\n * ```\n */\nexport function max<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (first: T, second: T) => number\n): T | undefined {\n  let it = iter(object);\n  let value = it.next();\n  if (value === undefined) {\n    return undefined;\n  }\n  let result = value;\n  while ((value = it.next()) !== undefined) {\n    if (fn(value, result) > 0) {\n      result = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Find the minimum and maximum values in an iterable.\n *\n * @param object - The iterable or array-like object to search.\n *\n * @param fn - The 3-way comparison function to apply to the values.\n *   It should return `< 0` if the first value is less than the second.\n *   `0` if the values are equivalent, or `> 0` if the first value is\n *   greater than the second.\n *\n * @returns A 2-tuple of the `[min, max]` values in the iterable. If\n *   multiple values are equivalent, the left-most values are returned.\n *   If the iterable is empty, this returns `undefined`.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { minmax } from '@lumino/algorithm';\n *\n * function numberCmp(a: number, b: number): number {\n *   return a - b;\n * }\n *\n * minmax([7, 4, 0, 3, 9, 4], numberCmp);  // [0, 9]\n * ```\n */\nexport function minmax<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (first: T, second: T) => number\n): [T, T] | undefined {\n  let it = iter(object);\n  let value = it.next();\n  if (value === undefined) {\n    return undefined;\n  }\n  let vmin = value;\n  let vmax = value;\n  while ((value = it.next()) !== undefined) {\n    if (fn(value, vmin) < 0) {\n      vmin = value;\n    } else if (fn(value, vmax) > 0) {\n      vmax = value;\n    }\n  }\n  return [vmin, vmax];\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator, iter, IterableOrArrayLike } from './iter';\n\n/**\n * Transform the values of an iterable with a mapping function.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param fn - The mapping function to invoke for each value.\n *\n * @returns An iterator which yields the transformed values.\n *\n * #### Example\n * ```typescript\n * import { map, toArray } from '@lumino/algorithm';\n *\n * let data = [1, 2, 3];\n *\n * let stream = map(data, value => value * 2);\n *\n * toArray(stream);  // [2, 4, 6]\n * ```\n */\nexport function map<T, U>(\n  object: IterableOrArrayLike<T>,\n  fn: (value: T, index: number) => U\n): IIterator<U> {\n  return new MapIterator<T, U>(iter(object), fn);\n}\n\n/**\n * An iterator which transforms values using a mapping function.\n */\nexport class MapIterator<T, U> implements IIterator<U> {\n  /**\n   * Construct a new map iterator.\n   *\n   * @param source - The iterator of values of interest.\n   *\n   * @param fn - The mapping function to invoke for each value.\n   */\n  constructor(source: IIterator<T>, fn: (value: T, index: number) => U) {\n    this._source = source;\n    this._fn = fn;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<U> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<U> {\n    let result = new MapIterator<T, U>(this._source.clone(), this._fn);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): U | undefined {\n    let value = this._source.next();\n    if (value === undefined) {\n      return undefined;\n    }\n    return this._fn.call(undefined, value, this._index++);\n  }\n\n  private _index = 0;\n  private _source: IIterator<T>;\n  private _fn: (value: T, index: number) => U;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator } from './iter';\n\n/**\n * Create an iterator of evenly spaced values.\n *\n * @param start - The starting value for the range, inclusive.\n *\n * @param stop - The stopping value for the range, exclusive.\n *\n * @param step - The distance between each value.\n *\n * @returns An iterator which produces evenly spaced values.\n *\n * #### Notes\n * In the single argument form of `range(stop)`, `start` defaults to\n * `0` and `step` defaults to `1`.\n *\n * In the two argument form of `range(start, stop)`, `step` defaults\n * to `1`.\n */\nexport function range(\n  start: number,\n  stop?: number,\n  step?: number\n): IIterator<number> {\n  if (stop === undefined) {\n    return new RangeIterator(0, start, 1);\n  }\n  if (step === undefined) {\n    return new RangeIterator(start, stop, 1);\n  }\n  return new RangeIterator(start, stop, step);\n}\n\n/**\n * An iterator which produces a range of evenly spaced values.\n */\nexport class RangeIterator implements IIterator<number> {\n  /**\n   * Construct a new range iterator.\n   *\n   * @param start - The starting value for the range, inclusive.\n   *\n   * @param stop - The stopping value for the range, exclusive.\n   *\n   * @param step - The distance between each value.\n   */\n  constructor(start: number, stop: number, step: number) {\n    this._start = start;\n    this._stop = stop;\n    this._step = step;\n    this._length = Private.rangeLength(start, stop, step);\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<number> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<number> {\n    let result = new RangeIterator(this._start, this._stop, this._step);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): number | undefined {\n    if (this._index >= this._length) {\n      return undefined;\n    }\n    return this._start + this._step * this._index++;\n  }\n\n  private _index = 0;\n  private _length: number;\n  private _start: number;\n  private _stop: number;\n  private _step: number;\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Compute the effective length of a range.\n   *\n   * @param start - The starting value for the range, inclusive.\n   *\n   * @param stop - The stopping value for the range, exclusive.\n   *\n   * @param step - The distance between each value.\n   *\n   * @returns The number of steps need to traverse the range.\n   */\n  export function rangeLength(\n    start: number,\n    stop: number,\n    step: number\n  ): number {\n    if (step === 0) {\n      return Infinity;\n    }\n    if (start > stop && step > 0) {\n      return 0;\n    }\n    if (start < stop && step < 0) {\n      return 0;\n    }\n    return Math.ceil((stop - start) / step);\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { iter, IterableOrArrayLike } from './iter';\n\n/**\n * Summarize all values in an iterable using a reducer function.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param fn - The reducer function to invoke for each value.\n *\n * @param initial - The initial value to start accumulation.\n *\n * @returns The final accumulated value.\n *\n * #### Notes\n * The `reduce` function follows the conventions of `Array#reduce`.\n *\n * If the iterator is empty, an initial value is required. That value\n * will be used as the return value. If no initial value is provided,\n * an error will be thrown.\n *\n * If the iterator contains a single item and no initial value is\n * provided, the single item is used as the return value.\n *\n * Otherwise, the reducer is invoked for each element in the iterable.\n * If an initial value is not provided, the first element will be used\n * as the initial accumulated value.\n *\n * #### Complexity\n * Linear.\n *\n * #### Example\n * ```typescript\n * import { reduce } from '@lumino/algorithm';\n *\n * let data = [1, 2, 3, 4, 5];\n *\n * let sum = reduce(data, (a, value) => a + value);  // 15\n * ```\n */\nexport function reduce<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (accumulator: T, value: T, index: number) => T\n): T;\nexport function reduce<T, U>(\n  object: IterableOrArrayLike<T>,\n  fn: (accumulator: U, value: T, index: number) => U,\n  initial: U\n): U;\nexport function reduce<T>(\n  object: IterableOrArrayLike<T>,\n  fn: (accumulator: any, value: T, index: number) => any,\n  initial?: any\n): any {\n  // Setup the iterator and fetch the first value.\n  let index = 0;\n  let it = iter(object);\n  let first = it.next();\n\n  // An empty iterator and no initial value is an error.\n  if (first === undefined && initial === undefined) {\n    throw new TypeError('Reduce of empty iterable with no initial value.');\n  }\n\n  // If the iterator is empty, return the initial value.\n  if (first === undefined) {\n    return initial;\n  }\n\n  // If the iterator has a single item and no initial value, the\n  // reducer is not invoked and the first item is the return value.\n  let second = it.next();\n  if (second === undefined && initial === undefined) {\n    return first;\n  }\n\n  // If iterator has a single item and an initial value is provided,\n  // the reducer is invoked and that result is the return value.\n  if (second === undefined) {\n    return fn(initial, first, index++);\n  }\n\n  // Setup the initial accumlated value.\n  let accumulator: any;\n  if (initial === undefined) {\n    accumulator = fn(first, second, index++);\n  } else {\n    accumulator = fn(fn(initial, first, index++), second, index++);\n  }\n\n  // Iterate the rest of the values, updating the accumulator.\n  let next: T | undefined;\n  while ((next = it.next()) !== undefined) {\n    accumulator = fn(accumulator, next, index++);\n  }\n\n  // Return the final accumulated value.\n  return accumulator;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator } from './iter';\n\n/**\n * Create an iterator which repeats a value a number of times.\n *\n * @param value - The value to repeat.\n *\n * @param count - The number of times to repeat the value.\n *\n * @returns A new iterator which repeats the specified value.\n *\n * #### Example\n * ```typescript\n * import { repeat, toArray } from '@lumino/algorithm';\n *\n * let stream = repeat(7, 3);\n *\n * toArray(stream);  // [7, 7, 7]\n * ```\n */\nexport function repeat<T>(value: T, count: number): IIterator<T> {\n  return new RepeatIterator<T>(value, count);\n}\n\n/**\n * Create an iterator which yields a value a single time.\n *\n * @param value - The value to wrap in an iterator.\n *\n * @returns A new iterator which yields the value a single time.\n *\n * #### Example\n * ```typescript\n * import { once, toArray } from '@lumino/algorithm';\n *\n * let stream = once(7);\n *\n * toArray(stream);  // [7]\n * ```\n */\nexport function once<T>(value: T): IIterator<T> {\n  return new RepeatIterator<T>(value, 1);\n}\n\n/**\n * An iterator which repeats a value a specified number of times.\n */\nexport class RepeatIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new repeat iterator.\n   *\n   * @param value - The value to repeat.\n   *\n   * @param count - The number of times to repeat the value.\n   */\n  constructor(value: T, count: number) {\n    this._value = value;\n    this._count = count;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    return new RepeatIterator<T>(this._value, this._count);\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    if (this._count <= 0) {\n      return undefined;\n    }\n    this._count--;\n    return this._value;\n  }\n\n  private _value: T;\n  private _count: number;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator } from './iter';\n\n/**\n * An object which can produce a reverse iterator over its values.\n */\nexport interface IRetroable<T> {\n  /**\n   * Get a reverse iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values in reverse.\n   */\n  retro(): IIterator<T>;\n}\n\n/**\n * A type alias for a retroable or builtin array-like object.\n */\nexport type RetroableOrArrayLike<T> = IRetroable<T> | ArrayLike<T>;\n\n/**\n * Create an iterator for a retroable object.\n *\n * @param object - The retroable or array-like object of interest.\n *\n * @returns An iterator which traverses the object's values in reverse.\n *\n * #### Example\n * ```typescript\n * import { retro, toArray } from '@lumino/algorithm';\n *\n * let data = [1, 2, 3, 4, 5, 6];\n *\n * let stream = retro(data);\n *\n * toArray(stream);  // [6, 5, 4, 3, 2, 1]\n * ```\n */\nexport function retro<T>(object: RetroableOrArrayLike<T>): IIterator<T> {\n  let it: IIterator<T>;\n  if (typeof (object as any).retro === 'function') {\n    it = (object as IRetroable<T>).retro();\n  } else {\n    it = new RetroArrayIterator<T>(object as ArrayLike<T>);\n  }\n  return it;\n}\n\n/**\n * An iterator which traverses an array-like object in reverse.\n *\n * #### Notes\n * This iterator can be used for any builtin JS array-like object.\n */\nexport class RetroArrayIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new retro iterator.\n   *\n   * @param source - The array-like object of interest.\n   */\n  constructor(source: ArrayLike<T>) {\n    this._source = source;\n    this._index = source.length - 1;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    let result = new RetroArrayIterator<T>(this._source);\n    result._index = this._index;\n    return result;\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    if (this._index < 0 || this._index >= this._source.length) {\n      return undefined;\n    }\n    return this._source[this._index--];\n  }\n\n  private _index: number;\n  private _source: ArrayLike<T>;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { each, IterableOrArrayLike } from './iter';\n\n/**\n * Topologically sort an iterable of edges.\n *\n * @param edges - The iterable or array-like object of edges to sort.\n *   An edge is represented as a 2-tuple of `[fromNode, toNode]`.\n *\n * @returns The topologically sorted array of nodes.\n *\n * #### Notes\n * If a cycle is present in the graph, the cycle will be ignored and\n * the return value will be only approximately sorted.\n *\n * #### Example\n * ```typescript\n * import { topologicSort } from '@lumino/algorithm';\n *\n * let data = [\n *   ['d', 'e'],\n *   ['c', 'd'],\n *   ['a', 'b'],\n *   ['b', 'c']\n * ];\n *\n * topologicSort(data);  // ['a', 'b', 'c', 'd', 'e']\n * ```\n */\nexport function topologicSort<T>(edges: IterableOrArrayLike<[T, T]>): T[] {\n  // Setup the shared sorting state.\n  let sorted: T[] = [];\n  let visited = new Set<T>();\n  let graph = new Map<T, T[]>();\n\n  // Add the edges to the graph.\n  each(edges, addEdge);\n\n  // Visit each node in the graph.\n  graph.forEach((v, k) => {\n    visit(k);\n  });\n\n  // Return the sorted results.\n  return sorted;\n\n  // Add an edge to the graph.\n  function addEdge(edge: [T, T]): void {\n    let [fromNode, toNode] = edge;\n    let children = graph.get(toNode);\n    if (children) {\n      children.push(fromNode);\n    } else {\n      graph.set(toNode, [fromNode]);\n    }\n  }\n\n  // Recursively visit the node.\n  function visit(node: T): void {\n    if (visited.has(node)) {\n      return;\n    }\n    visited.add(node);\n    let children = graph.get(node);\n    if (children) {\n      children.forEach(visit);\n    }\n    sorted.push(node);\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator, iter, IterableOrArrayLike } from './iter';\n\n/**\n * Iterate over an iterable using a stepped increment.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param step - The distance to step on each iteration. A value\n *   of less than `1` will behave the same as a value of `1`.\n *\n * @returns An iterator which traverses the iterable step-wise.\n *\n * #### Example\n * ```typescript\n * import { stride, toArray } from '@lumino/algorithm';\n *\n * let data = [1, 2, 3, 4, 5, 6];\n *\n * let stream = stride(data, 2);\n *\n * toArray(stream);  // [1, 3, 5];\n * ```\n */\nexport function stride<T>(\n  object: IterableOrArrayLike<T>,\n  step: number\n): IIterator<T> {\n  return new StrideIterator<T>(iter(object), step);\n}\n\n/**\n * An iterator which traverses a source iterator step-wise.\n */\nexport class StrideIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new stride iterator.\n   *\n   * @param source - The iterator of values of interest.\n   *\n   * @param step - The distance to step on each iteration. A value\n   *   of less than `1` will behave the same as a value of `1`.\n   */\n  constructor(source: IIterator<T>, step: number) {\n    this._source = source;\n    this._step = step;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    return new StrideIterator<T>(this._source.clone(), this._step);\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    let value = this._source.next();\n    for (let n = this._step - 1; n > 0; --n) {\n      this._source.next();\n    }\n    return value;\n  }\n\n  private _source: IIterator<T>;\n  private _step: number;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * The namespace for string-specific algorithms.\n */\nexport namespace StringExt {\n  /**\n   * Find the indices of characters in a source text.\n   *\n   * @param source - The source text which should be searched.\n   *\n   * @param query - The characters to locate in the source text.\n   *\n   * @param start - The index to start the search.\n   *\n   * @returns The matched indices, or `null` if there is no match.\n   *\n   * #### Complexity\n   * Linear on `sourceText`.\n   *\n   * #### Notes\n   * In order for there to be a match, all of the characters in `query`\n   * **must** appear in `source` in the order given by `query`.\n   *\n   * Characters are matched using strict `===` equality.\n   */\n  export function findIndices(\n    source: string,\n    query: string,\n    start = 0\n  ): number[] | null {\n    let indices = new Array<number>(query.length);\n    for (let i = 0, j = start, n = query.length; i < n; ++i, ++j) {\n      j = source.indexOf(query[i], j);\n      if (j === -1) {\n        return null;\n      }\n      indices[i] = j;\n    }\n    return indices;\n  }\n\n  /**\n   * The result of a string match function.\n   */\n  export interface IMatchResult {\n    /**\n     * A score which indicates the strength of the match.\n     *\n     * The documentation of a given match function should specify\n     * whether a lower or higher score is a stronger match.\n     */\n    score: number;\n\n    /**\n     * The indices of the matched characters in the source text.\n     *\n     * The indices will appear in increasing order.\n     */\n    indices: number[];\n  }\n\n  /**\n   * A string matcher which uses a sum-of-squares algorithm.\n   *\n   * @param source - The source text which should be searched.\n   *\n   * @param query - The characters to locate in the source text.\n   *\n   * @param start - The index to start the search.\n   *\n   * @returns The match result, or `null` if there is no match.\n   *   A lower `score` represents a stronger match.\n   *\n   * #### Complexity\n   * Linear on `sourceText`.\n   *\n   * #### Notes\n   * This scoring algorithm uses a sum-of-squares approach to determine\n   * the score. In order for there to be a match, all of the characters\n   * in `query` **must** appear in `source` in order. The index of each\n   * matching character is squared and added to the score. This means\n   * that early and consecutive character matches are preferred, while\n   * late matches are heavily penalized.\n   */\n  export function matchSumOfSquares(\n    source: string,\n    query: string,\n    start = 0\n  ): IMatchResult | null {\n    let indices = findIndices(source, query, start);\n    if (!indices) {\n      return null;\n    }\n    let score = 0;\n    for (let i = 0, n = indices.length; i < n; ++i) {\n      let j = indices[i] - start;\n      score += j * j;\n    }\n    return { score, indices };\n  }\n\n  /**\n   * A string matcher which uses a sum-of-deltas algorithm.\n   *\n   * @param source - The source text which should be searched.\n   *\n   * @param query - The characters to locate in the source text.\n   *\n   * @param start - The index to start the search.\n   *\n   * @returns The match result, or `null` if there is no match.\n   *   A lower `score` represents a stronger match.\n   *\n   * #### Complexity\n   * Linear on `sourceText`.\n   *\n   * #### Notes\n   * This scoring algorithm uses a sum-of-deltas approach to determine\n   * the score. In order for there to be a match, all of the characters\n   * in `query` **must** appear in `source` in order. The delta between\n   * the indices are summed to create the score. This means that groups\n   * of matched characters are preferred, while fragmented matches are\n   * penalized.\n   */\n  export function matchSumOfDeltas(\n    source: string,\n    query: string,\n    start = 0\n  ): IMatchResult | null {\n    let indices = findIndices(source, query, start);\n    if (!indices) {\n      return null;\n    }\n    let score = 0;\n    let last = start - 1;\n    for (let i = 0, n = indices.length; i < n; ++i) {\n      let j = indices[i];\n      score += j - last - 1;\n      last = j;\n    }\n    return { score, indices };\n  }\n\n  /**\n   * Highlight the matched characters of a source text.\n   *\n   * @param source - The text which should be highlighted.\n   *\n   * @param indices - The indices of the matched characters. They must\n   *   appear in increasing order and must be in bounds of the source.\n   *\n   * @param fn - The function to apply to the matched chunks.\n   *\n   * @returns An array of unmatched and highlighted chunks.\n   */\n  export function highlight<T>(\n    source: string,\n    indices: ReadonlyArray<number>,\n    fn: (chunk: string) => T\n  ): Array<string | T> {\n    // Set up the result array.\n    let result: Array<string | T> = [];\n\n    // Set up the counter variables.\n    let k = 0;\n    let last = 0;\n    let n = indices.length;\n\n    // Iterator over each index.\n    while (k < n) {\n      // Set up the chunk indices.\n      let i = indices[k];\n      let j = indices[k];\n\n      // Advance the right chunk index until it's non-contiguous.\n      while (++k < n && indices[k] === j + 1) {\n        j++;\n      }\n\n      // Extract the unmatched text.\n      if (last < i) {\n        result.push(source.slice(last, i));\n      }\n\n      // Extract and highlight the matched text.\n      if (i < j + 1) {\n        result.push(fn(source.slice(i, j + 1)));\n      }\n\n      // Update the last visited index.\n      last = j + 1;\n    }\n\n    // Extract any remaining unmatched text.\n    if (last < source.length) {\n      result.push(source.slice(last));\n    }\n\n    // Return the highlighted result.\n    return result;\n  }\n\n  /**\n   * A 3-way string comparison function.\n   *\n   * @param a - The first string of interest.\n   *\n   * @param b - The second string of interest.\n   *\n   * @returns `-1` if `a < b`, else `1` if `a > b`, else `0`.\n   */\n  export function cmp(a: string, b: string): number {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator, iter, IterableOrArrayLike } from './iter';\n\n/**\n * Take a fixed number of items from an iterable.\n *\n * @param object - The iterable or array-like object of interest.\n *\n * @param count - The number of items to take from the iterable.\n *\n * @returns An iterator which yields the specified number of items\n *   from the source iterable.\n *\n * #### Notes\n * The returned iterator will exhaust early if the source iterable\n * contains an insufficient number of items.\n */\nexport function take<T>(\n  object: IterableOrArrayLike<T>,\n  count: number\n): IIterator<T> {\n  return new TakeIterator<T>(iter(object), count);\n}\n\n/**\n * An iterator which takes a fixed number of items from a source.\n */\nexport class TakeIterator<T> implements IIterator<T> {\n  /**\n   * Construct a new take iterator.\n   *\n   * @param source - The iterator of interest.\n   *\n   * @param count - The number of items to take from the source.\n   */\n  constructor(source: IIterator<T>, count: number) {\n    this._source = source;\n    this._count = count;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T> {\n    return new TakeIterator<T>(this._source.clone(), this._count);\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T | undefined {\n    if (this._count <= 0) {\n      return undefined;\n    }\n    let value = this._source.next();\n    if (value === undefined) {\n      return undefined;\n    }\n    this._count--;\n    return value;\n  }\n\n  private _count: number;\n  private _source: IIterator<T>;\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IIterator, iter, IterableOrArrayLike } from './iter';\n\n/**\n * Iterate several iterables in lockstep.\n *\n * @param objects - The iterable or array-like objects of interest.\n *\n * @returns An iterator which yields successive tuples of values where\n *   each value is taken in turn from the provided iterables. It will\n *   be as long as the shortest provided iterable.\n *\n * #### Example\n * ```typescript\n * import { zip, toArray } from '@lumino/algorithm';\n *\n * let data1 = [1, 2, 3];\n * let data2 = [4, 5, 6];\n *\n * let stream = zip(data1, data2);\n *\n * toArray(stream);  // [[1, 4], [2, 5], [3, 6]]\n * ```\n */\nexport function zip<T>(...objects: IterableOrArrayLike<T>[]): IIterator<T[]> {\n  return new ZipIterator<T>(objects.map(iter));\n}\n\n/**\n * An iterator which iterates several sources in lockstep.\n */\nexport class ZipIterator<T> implements IIterator<T[]> {\n  /**\n   * Construct a new zip iterator.\n   *\n   * @param source - The iterators of interest.\n   */\n  constructor(source: IIterator<T>[]) {\n    this._source = source;\n  }\n\n  /**\n   * Get an iterator over the object's values.\n   *\n   * @returns An iterator which yields the object's values.\n   */\n  iter(): IIterator<T[]> {\n    return this;\n  }\n\n  /**\n   * Create an independent clone of the iterator.\n   *\n   * @returns A new independent clone of the iterator.\n   */\n  clone(): IIterator<T[]> {\n    return new ZipIterator<T>(this._source.map(it => it.clone()));\n  }\n\n  /**\n   * Get the next value from the iterator.\n   *\n   * @returns The next value from the iterator, or `undefined`.\n   */\n  next(): T[] | undefined {\n    let result = new Array<T>(this._source.length);\n    for (let i = 0, n = this._source.length; i < n; ++i) {\n      let value = this._source[i].next();\n      if (value === undefined) {\n        return undefined;\n      }\n      result[i] = value;\n    }\n    return result;\n  }\n\n  private _source: IIterator<T>[];\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2018, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt,\n  each,\n  empty,\n  IIterable,\n  IIterator,\n  IRetroable,\n  IterableOrArrayLike\n} from '@lumino/algorithm';\n\n/**\n * A generic B+ tree.\n *\n * #### Notes\n * Most operations have `O(log32 n)` or better complexity.\n *\n * @deprecated This class will be removed in @lumino/collections@^2.0.0\n */\nexport class BPlusTree<T> implements IIterable<T>, IRetroable<T> {\n  /**\n   * Construct a new B+ tree.\n   *\n   * @param cmp - The item comparison function for the tree.\n   */\n  constructor(cmp: (a: T, b: T) => number) {\n    this.cmp = cmp;\n  }\n\n  /**\n   * The item comparison function for the tree.\n   *\n   * #### Complexity\n   * `O(1)`\n   */\n  readonly cmp: (a: T, b: T) => number;\n\n  /**\n   * Whether the tree is empty.\n   *\n   * #### Complexity\n   * `O(1)`\n   */\n  get isEmpty(): boolean {\n    return this._root.size === 0;\n  }\n\n  /**\n   * The size of the tree.\n   *\n   * #### Complexity\n   * `O(1)`\n   */\n  get size(): number {\n    return this._root.size;\n  }\n\n  /**\n   * The first item in the tree.\n   *\n   * This is `undefined` if the tree is empty.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  get first(): T | undefined {\n    let node = Private.firstLeaf(this._root);\n    return node.size > 0 ? node.items[0] : undefined;\n  }\n\n  /**\n   * The last item in the tree.\n   *\n   * This is `undefined` if the tree is empty.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  get last(): T | undefined {\n    let node = Private.lastLeaf(this._root);\n    return node.size > 0 ? node.items[node.size - 1] : undefined;\n  }\n\n  /**\n   * Create an iterator over the items in the tree.\n   *\n   * @returns A new iterator starting with the first item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  iter(): IIterator<T> {\n    return Private.iterItems(this._root);\n  }\n\n  /**\n   * Create a reverse iterator over the items in the tree.\n   *\n   * @returns A new iterator starting with the last item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  retro(): IIterator<T> {\n    return Private.retroItems(this._root);\n  }\n\n  /**\n   * Create an iterator for a slice of items in the tree.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `< stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `0`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `> start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size`.\n   *\n   * @returns A new iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  slice(start?: number, stop?: number): IIterator<T> {\n    return Private.sliceItems(this._root, start, stop);\n  }\n\n  /**\n   * Create a reverse iterator for a slice of items in the tree.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `> stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size - 1`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `< start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `-size - 1`.\n   *\n   * @returns A new reverse iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  retroSlice(start?: number, stop?: number): IIterator<T> {\n    return Private.retroSliceItems(this._root, start, stop);\n  }\n\n  /**\n   * Get the item at a particular index.\n   *\n   * @param index - The index of the item of interest. Negative\n   *   values are taken as an offset from the end of the tree.\n   *\n   * @returns The item at the specified index, or `undefined` if\n   *   the index is out of range.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  at(index: number): T | undefined {\n    return Private.itemAt(this._root, index);\n  }\n\n  /**\n   * Test whether the tree has an item which matches a key.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns `true` if the tree has an item which matches the given\n   *   key, `false` otherwise.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  has<U>(key: U, cmp: (item: T, key: U) => number): boolean {\n    return Private.hasItem(this._root, key, cmp);\n  }\n\n  /**\n   * Get the index of an item which matches a key.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns The index of the item which matches the given key. A\n   *   negative value means that a matching item does not exist in\n   *   the tree, but if one did it would reside at `-index - 1`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  indexOf<U>(key: U, cmp: (item: T, key: U) => number): number {\n    return Private.indexOf(this._root, key, cmp);\n  }\n\n  /**\n   * Get the item which matches a key.\n   *\n   * @param item - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns The item which matches the given key, or `undefined` if\n   *   the tree does not have a matching item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  get<U>(key: U, cmp: (item: T, key: U) => number): T | undefined {\n    return Private.getItem(this._root, key, cmp);\n  }\n\n  /**\n   * Assign new items to the tree, replacing all current items.\n   *\n   * @param items - The items to assign to the tree.\n   *\n   * #### Complexity\n   * `O(n log32 n)`\n   */\n  assign(items: IterableOrArrayLike<T>): void {\n    this.clear();\n    this.update(items);\n  }\n\n  /**\n   * Insert an item into the tree.\n   *\n   * @param item - The item of interest.\n   *\n   * @returns If the given item matches an existing item in the tree,\n   *   the given item will replace it, and the existing item will be\n   *   returned. Otherwise, this method returns `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  insert(item: T): T | undefined {\n    let existing = Private.insertItem(this._root, item, this.cmp);\n    this._root = Private.maybeSplitRoot(this._root);\n    return existing;\n  }\n\n  /**\n   * Update the tree with multiple items.\n   *\n   * @param items - The items to insert into the tree.\n   *\n   * #### Complexity\n   * `O(k log32 n)`\n   */\n  update(items: IterableOrArrayLike<T>): void {\n    each(items, item => {\n      this.insert(item);\n    });\n  }\n\n  /**\n   * Delete an item which matches a particular key.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns The item removed from the tree, or `undefined` if no\n   *   item matched the given key.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  delete<U>(key: U, cmp: (item: T, key: U) => number): T | undefined {\n    let item = Private.deleteItem(this._root, key, cmp);\n    this._root = Private.maybeExtractRoot(this._root);\n    return item;\n  }\n\n  /**\n   * Remove an item at a particular index.\n   *\n   * @param index - The index of the item to remove. Negative\n   *   values are taken as an offset from the end of the tree.\n   *\n   * @returns The item removed from the tree, or `undefined` if\n   *   the given index is out of range.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  remove(index: number): T | undefined {\n    let item = Private.removeItem(this._root, index);\n    this._root = Private.maybeExtractRoot(this._root);\n    return item;\n  }\n\n  /**\n   * Clear the contents of the tree.\n   *\n   * #### Complexity\n   * `O(n)`\n   */\n  clear(): void {\n    Private.clear(this._root);\n    this._root = new Private.LeafNode<T>();\n  }\n\n  private _root: Private.Node<T> = new Private.LeafNode<T>();\n}\n\n/**\n * The namespace for the `BPlusTree` class statics.\n *\n * @deprecated This namespace will be removed in @lumino/collections@^2.0.0\n */\nexport namespace BPlusTree {\n  /**\n   * Create a new B+ tree populated with the given items.\n   *\n   * @param items - The items to add to the tree.\n   *\n   * @param cmp - The item comparison function for the tree.\n   *\n   * @returns A new B+ tree populated with the given items.\n   *\n   * #### Complexity\n   * `O(n log32 n)`\n   */\n  export function from<T>(\n    items: IterableOrArrayLike<T>,\n    cmp: (a: T, b: T) => number\n  ): BPlusTree<T> {\n    let tree = new BPlusTree<T>(cmp);\n    tree.assign(items);\n    return tree;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A const enum of the B+ tree node types.\n   */\n  export const enum NodeType {\n    Branch,\n    Leaf\n  }\n\n  /**\n   * A branch node in a B+ tree.\n   */\n  export class BranchNode<T> {\n    /**\n     * The left-most item of each child subtree.\n     */\n    readonly items: T[] = [];\n\n    /**\n     * The cumulative sizes of each child subtree.\n     */\n    readonly sizes: number[] = [];\n\n    /**\n     * The child nodes of this branch node.\n     */\n    readonly children: Node<T>[] = [];\n\n    /**\n     * The discriminated type of the node.\n     */\n    get type(): NodeType.Branch {\n      return NodeType.Branch;\n    }\n\n    /**\n     * The total number of items in the subtree.\n     */\n    get size(): number {\n      return this.sizes[this.sizes.length - 1];\n    }\n\n    /**\n     * The tree width of the node.\n     */\n    get width(): number {\n      return this.children.length;\n    }\n  }\n\n  /**\n   * A leaf node in a B+ tree.\n   */\n  export class LeafNode<T> {\n    /**\n     * The next sibling leaf node of this leaf node.\n     */\n    next: LeafNode<T> | null = null;\n\n    /**\n     * The previous sibling leaf node of this leaf node.\n     */\n    prev: LeafNode<T> | null = null;\n\n    /**\n     * The items of the leaf.\n     */\n    readonly items: T[] = [];\n\n    /**\n     * The discriminated type of the node.\n     */\n    get type(): NodeType.Leaf {\n      return NodeType.Leaf;\n    }\n\n    /**\n     * The total number of items in the leaf.\n     */\n    get size(): number {\n      return this.items.length;\n    }\n\n    /**\n     * The tree width of the node.\n     */\n    get width(): number {\n      return this.items.length;\n    }\n  }\n\n  /**\n   * A type alias for the B+ tree nodes.\n   */\n  export type Node<T> = BranchNode<T> | LeafNode<T>;\n\n  /**\n   * Get the first leaf node in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The first leaf node in the tree.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function firstLeaf<T>(node: Node<T>): LeafNode<T> {\n    while (node.type === NodeType.Branch) {\n      node = node.children[0];\n    }\n    return node;\n  }\n\n  /**\n   * Get the last leaf node in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The last leaf node in the tree.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function lastLeaf<T>(node: Node<T>): LeafNode<T> {\n    while (node.type === NodeType.Branch) {\n      node = node.children[node.children.length - 1];\n    }\n    return node;\n  }\n\n  /**\n   * Create a forward iterator for the items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns A new forward iterator starting with the first item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function iterItems<T>(node: Node<T>): IIterator<T> {\n    let leaf = firstLeaf(node);\n    return new ForwardIterator<T>(leaf, 0, -1);\n  }\n\n  /**\n   * Create a reverse iterator for the items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns A new reverse iterator starting with the last item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function retroItems<T>(node: Node<T>): IIterator<T> {\n    let leaf = lastLeaf(node);\n    return new RetroIterator<T>(leaf, leaf.size - 1, -1);\n  }\n\n  /**\n   * Create an iterator for a slice of items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `< stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `0`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `> start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size`.\n   *\n   * @returns A new iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function sliceItems<T>(\n    node: Node<T>,\n    start?: number,\n    stop?: number\n  ): IIterator<T> {\n    // Normalize the start index.\n    if (start === undefined) {\n      start = 0;\n    } else if (start < 0) {\n      start = Math.max(0, start + node.size);\n    } else {\n      start = Math.min(start, node.size);\n    }\n\n    // Normalize the stop index.\n    if (stop === undefined) {\n      stop = node.size;\n    } else if (stop < 0) {\n      stop = Math.max(0, stop + node.size);\n    } else {\n      stop = Math.min(stop, node.size);\n    }\n\n    // Compute effective count.\n    let count = Math.max(0, stop - start);\n\n    // Bail early if there is nothing to iterate.\n    if (count === 0) {\n      return empty<T>();\n    }\n\n    // Find the starting leaf node and local index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByIndex(node.sizes, start);\n      if (i > 0) start -= node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Return the forward iterator for the range.\n    return new ForwardIterator<T>(node, start, count);\n  }\n\n  /**\n   * Create a reverse iterator for a slice of items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `> stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size - 1`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `< start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `-size - 1`.\n   *\n   * @returns A new reverse iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function retroSliceItems<T>(\n    node: Node<T>,\n    start?: number,\n    stop?: number\n  ): IIterator<T> {\n    // Normalize the start index.\n    if (start === undefined) {\n      start = node.size - 1;\n    } else if (start < 0) {\n      start = Math.max(-1, start + node.size);\n    } else {\n      start = Math.min(start, node.size - 1);\n    }\n\n    // Normalize the stop index.\n    if (stop === undefined) {\n      stop = -1;\n    } else if (stop < 0) {\n      stop = Math.max(-1, stop + node.size);\n    } else {\n      stop = Math.min(stop, node.size - 1);\n    }\n\n    // Compute the effective count.\n    let count = Math.max(0, start - stop);\n\n    // Bail early if there is nothing to iterate.\n    if (count === 0) {\n      return empty<T>();\n    }\n\n    // Find the starting leaf node and local index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByIndex(node.sizes, start);\n      if (i > 0) start -= node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Return the retro iterator for the range.\n    return new RetroIterator<T>(node, start, count);\n  }\n\n  /**\n   * Get the item at the specified index.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param index - The index of the item of interest. Negative\n   *   values are taken as an offset from the end of the tree.\n   *\n   * @returns The item at the specified index, or `undefined` if\n   *   the index is out of range.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function itemAt<T>(node: Node<T>, index: number): T | undefined {\n    // Wrap negative indices.\n    if (index < 0) {\n      index += node.size;\n    }\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= node.size) {\n      return undefined;\n    }\n\n    // Find the containing leaf node and local index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByIndex(node.sizes, index);\n      if (i > 0) index -= node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Return the item at the specified index.\n    return node.items[index];\n  }\n\n  /**\n   * Test whether the tree contains an item which matches a key.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns Whether the tree contains a matching item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function hasItem<T, U>(\n    node: Node<T>,\n    key: U,\n    cmp: (item: T, key: U) => number\n  ): boolean {\n    // Find the containing leaf node.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByKey(node.items, key, cmp);\n      node = node.children[i];\n    }\n\n    // Find the key index.\n    let i = findKeyIndex(node.items, key, cmp);\n\n    // Return whether or not the node contains a matching item.\n    return i >= 0;\n  }\n\n  /**\n   * Get the index of the item which matches a key.\n   *\n   * @param node - The node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns The index of the item which matches the given key. A\n   *   negative value means that a matching item does not exist in\n   *   the tree, but if one did it would reside at `-index - 1`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function indexOf<T, U>(\n    node: Node<T>,\n    key: U,\n    cmp: (item: T, key: U) => number\n  ): number {\n    // Set up the global index.\n    let index = 0;\n\n    // Find the containing leaf node and global index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByKey(node.items, key, cmp);\n      if (i > 0) index += node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Find the key index.\n    let i = findKeyIndex(node.items, key, cmp);\n\n    // Return the final computed index.\n    return i >= 0 ? index + i : -index + i;\n  }\n\n  /**\n   * Get the item for a particular key.\n   *\n   * @param node - The node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns The item for the specified key, or `undefined` if\n   *   the tree does not have a matching item for the key.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export function getItem<T, U>(\n    node: Node<T>,\n    key: U,\n    cmp: (item: T, key: U) => number\n  ): T | undefined {\n    // Find the containing leaf node.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByKey(node.items, key, cmp);\n      node = node.children[i];\n    }\n\n    // Find the key index.\n    let i = findKeyIndex(node.items, key, cmp);\n\n    // Return the item for the given key.\n    return i >= 0 ? node.items[i] : undefined;\n  }\n\n  /**\n   * Insert an item into the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param item - The item of interest.\n   *\n   * @param cmp - The item comparison function.\n   *\n   * @returns If the given item matches an existing item in the tree,\n   *   the given item will replace it, and the existing item will be\n   *   returned. Otherwise, this function returns `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   *\n   * #### Notes\n   * The root may be overfull after calling this function.\n   */\n  export function insertItem<T>(\n    node: Node<T>,\n    item: T,\n    cmp: (a: T, b: T) => number\n  ): T | undefined {\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      // Find the index for the given item.\n      let i = findKeyIndex(node.items, item, cmp);\n\n      // Fetch the existing item and insert the new item.\n      let existing: T | undefined;\n      if (i >= 0) {\n        existing = node.items[i];\n        node.items[i] = item;\n      } else {\n        existing = undefined;\n        ArrayExt.insert(node.items, -i - 1, item);\n      }\n\n      // Return the existing item.\n      return existing;\n    }\n\n    // Find the pivot index for the insert.\n    let i = findPivotIndexByKey(node.items, item, cmp);\n\n    // Fetch the pivot child.\n    let child = node.children[i];\n\n    // Fetch the current size of the child.\n    let prevSize = child.size;\n\n    // Recursively insert the item into the child.\n    let existing = insertItem(child, item, cmp);\n\n    // Fetch the updated size of the child.\n    let currSize = child.size;\n\n    // Update the item state of the branch.\n    node.items[i] = child.items[0];\n\n    // Bail early if the child size did not change.\n    if (prevSize === currSize) {\n      return existing;\n    }\n\n    // Split the child if it's overfull.\n    if (child.width > MAX_NODE_WIDTH) {\n      let next = splitNode(child);\n      ArrayExt.insert(node.children, i + 1, next);\n      ArrayExt.insert(node.items, i + 1, next.items[0]);\n    }\n\n    // Update the dirty sizes of the branch.\n    updateSizes(node, i);\n\n    // Return the existing item.\n    return existing;\n  }\n\n  /**\n   * Delete an item in the tree.\n   *\n   * @param node - The node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns The deleted item or `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   *\n   * #### Notes\n   * The root may be underfull after calling this function.\n   */\n  export function deleteItem<T, U>(\n    node: Node<T>,\n    key: U,\n    cmp: (item: T, key: U) => number\n  ): T | undefined {\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      // Find the index for the given key.\n      let i = findKeyIndex(node.items, key, cmp);\n\n      // Bail early if the item does not exist.\n      if (i < 0) {\n        return undefined;\n      }\n\n      // Remove the item at the computed index.\n      return ArrayExt.removeAt(node.items, i);\n    }\n\n    // Find the pivot index for the delete.\n    let i = findPivotIndexByKey(node.items, key, cmp);\n\n    // Fetch the pivot child.\n    let child = node.children[i];\n\n    // Fetch the current size of the child.\n    let prevSize = child.size;\n\n    // Recursively remove the item from the child.\n    let item = deleteItem(child, key, cmp);\n\n    // Fetch the updated size of the child.\n    let currSize = child.size;\n\n    // Bail early if the child size did not change.\n    if (prevSize === currSize) {\n      return item;\n    }\n\n    // Update the item state of the branch.\n    node.items[i] = child.items[0];\n\n    // Join the child if it's underfull.\n    if (child.width < MIN_NODE_WIDTH) {\n      i = joinChild(node, i);\n    }\n\n    // Update the dirty sizes of the branch.\n    updateSizes(node, i);\n\n    // Return the deleted item.\n    return item;\n  }\n\n  /**\n   * Remove an item from the tree.\n   *\n   * @param node - The node of interest.\n   *\n   * @param index - The index of interest.\n   *\n   * @returns The removed item or `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   *\n   * #### Notes\n   * The root may be underfull after calling this function.\n   */\n  export function removeItem<T>(node: Node<T>, index: number): T | undefined {\n    // Wrap negative indices.\n    if (index < 0) {\n      index += node.size;\n    }\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= node.size) {\n      return undefined;\n    }\n\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      return ArrayExt.removeAt(node.items, index);\n    }\n\n    // Find the pivot index for the remove.\n    let i = findPivotIndexByIndex(node.sizes, index);\n    if (i > 0) index -= node.sizes[i];\n\n    // Fetch the pivot child.\n    let child = node.children[i];\n\n    // Recursively remove the item from the child.\n    let item = removeItem(child, index);\n\n    // Update the item state of the branch.\n    node.items[i] = child.items[0];\n\n    // Join the child if it's underfull.\n    if (child.width < MIN_NODE_WIDTH) {\n      i = joinChild(node, i);\n    }\n\n    // Update the dirty sizes of the branch.\n    updateSizes(node, i);\n\n    // Return the removed item.\n    return item;\n  }\n\n  /**\n   * Recursively clear the contents of a node.\n   *\n   * @param node - The node of interest.\n   *\n   * #### Complexity\n   * `O(n)`\n   */\n  export function clear<T>(node: Node<T>): void {\n    if (node.type === NodeType.Branch) {\n      each(node.children, clear);\n      node.children.length = 0;\n      node.sizes.length = 0;\n      node.items.length = 0;\n    } else {\n      node.items.length = 0;\n      node.next = null;\n      node.prev = null;\n    }\n  }\n\n  /**\n   * Split a root node and create a new root, if needed.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The new root node.\n   */\n  export function maybeSplitRoot<T>(node: Node<T>): Node<T> {\n    // Bail early if the current root is not overfull.\n    if (node.width <= MAX_NODE_WIDTH) {\n      return node;\n    }\n\n    // Create a new root branch node.\n    let root = new BranchNode<T>();\n\n    // Split the node to the right and create a new sibling.\n    let next = splitNode(node);\n\n    // Add the sizes to the root.\n    root.sizes[0] = node.size;\n    root.sizes[1] = node.size + next.size;\n\n    // Add the children to the root.\n    root.children[0] = node;\n    root.children[1] = next;\n\n    // Add the items to the root.\n    root.items[0] = node.items[0];\n    root.items[1] = next.items[0];\n\n    // Return the new root node.\n    return root;\n  }\n\n  /**\n   * Extract a single node child as a new root, if needed.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The new root node.\n   */\n  export function maybeExtractRoot<T>(node: Node<T>): Node<T> {\n    // Bail early if the node it already a leaf.\n    if (node.type === NodeType.Leaf) {\n      return node;\n    }\n\n    // Bail early if the branch has more than one child.\n    if (node.children.length > 1) {\n      return node;\n    }\n\n    // Extract the sole remaining child as the new root.\n    let root = node.children.pop()!;\n\n    // Clear the rest of the node state.\n    clear(node);\n\n    // Return the new root.\n    return root;\n  }\n\n  /**\n   * The maximum width for a node in the tree.\n   */\n  const MAX_NODE_WIDTH = 32;\n\n  /**\n   * The minimum width for a node in the tree.\n   */\n  const MIN_NODE_WIDTH = MAX_NODE_WIDTH >> 1;\n\n  /**\n   * A forward iterator for a B+ tree.\n   */\n  class ForwardIterator<T> implements IIterator<T> {\n    /**\n     * Construct a new forward iterator.\n     *\n     * @param node - The first leaf node in the chain.\n     *\n     * @param index - The local index of the first item.\n     *\n     * @param count - The number of items to iterate. A value `< 0`\n     *   will iterate all available items.\n     */\n    constructor(node: LeafNode<T> | null, index: number, count: number) {\n      this._node = node;\n      this._index = index;\n      this._count = count;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new ForwardIterator<T>(this._node, this._index, this._count);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (this._node === null || this._count === 0) {\n        return undefined;\n      }\n      if (this._index >= this._node.size) {\n        this._node = this._node.next;\n        this._index = 0;\n        return this.next();\n      }\n      if (this._count > 0) {\n        this._count--;\n      }\n      return this._node.items[this._index++];\n    }\n\n    private _index: number;\n    private _count: number;\n    private _node: LeafNode<T> | null;\n  }\n\n  /**\n   * A reverse iterator for a B+ tree.\n   */\n  class RetroIterator<T> implements IIterator<T> {\n    /**\n     * Construct a new retro iterator.\n     *\n     * @param node - The last leaf node in the chain.\n     *\n     * @param index - The local index of the last item.\n     *\n     * @param count - The number of items to iterate. A value `< 0`\n     *   will iterate all available items.\n     */\n    constructor(node: LeafNode<T> | null, index: number, count: number) {\n      this._node = node;\n      this._index = index;\n      this._count = count;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new RetroIterator<T>(this._node, this._index, this._count);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (this._node === null || this._count === 0) {\n        return undefined;\n      }\n      if (this._index >= this._node.size) {\n        this._index = this._node.size - 1;\n      }\n      if (this._index < 0) {\n        this._node = this._node.prev;\n        this._index = this._node ? this._node.size - 1 : -1;\n        return this.next();\n      }\n      if (this._count > 0) {\n        this._count--;\n      }\n      return this._node.items[this._index--];\n    }\n\n    private _index: number;\n    private _count: number;\n    private _node: LeafNode<T> | null;\n  }\n\n  /**\n   * Find the pivot index for a particular local index.\n   */\n  function findPivotIndexByIndex(sizes: number[], index: number): number {\n    let n = sizes.length;\n    for (let i = 0; i < n; ++i) {\n      if (sizes[i] > index) {\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  /**\n   * Find the pivot index for a particular key.\n   */\n  function findPivotIndexByKey<T, U>(\n    items: T[],\n    key: U,\n    cmp: (item: T, key: U) => number\n  ): number {\n    let n = items.length;\n    for (let i = 1; i < n; ++i) {\n      if (cmp(items[i], key) > 0) {\n        return i - 1;\n      }\n    }\n    return n - 1;\n  }\n\n  /**\n   * Find the key index for a particular key.\n   */\n  function findKeyIndex<T, U>(\n    items: T[],\n    key: U,\n    cmp: (item: T, key: U) => number\n  ): number {\n    let n = items.length;\n    for (let i = 0; i < n; ++i) {\n      let c = cmp(items[i], key);\n      if (c === 0) {\n        return i;\n      }\n      if (c > 0) {\n        return -i - 1;\n      }\n    }\n    return -n - 1;\n  }\n\n  /**\n   * Update the sizes of a branch node starting at the given index.\n   */\n  function updateSizes<T>(node: BranchNode<T>, i: number): void {\n    let { sizes, children } = node;\n    let last = i > 0 ? sizes[i - 1] : 0;\n    for (let n = children.length; i < n; ++i) {\n      last = sizes[i] = last + children[i].size;\n    }\n    sizes.length = children.length;\n  }\n\n  /**\n   * Split a node and return its new next sibling.\n   *\n   * @param node - The node of interest.\n   *\n   * @returns The new next sibling node.\n   */\n  function splitNode<T>(node: Node<T>): Node<T> {\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      // Create the new sibling leaf node.\n      let next = new LeafNode<T>();\n\n      // Move the items to the new sibling.\n      let v1 = node.items;\n      let v2 = next.items;\n      for (let i = MIN_NODE_WIDTH, n = v1.length; i < n; ++i) {\n        v2.push(v1[i]);\n      }\n      v1.length = MIN_NODE_WIDTH;\n\n      // Patch up the sibling links.\n      if (node.next) node.next.prev = next;\n      next.next = node.next;\n      next.prev = node;\n      node.next = next;\n\n      // Return the new next sibling.\n      return next;\n    }\n\n    // Create the new sibling branch node.\n    let next = new BranchNode<T>();\n\n    // Move the children to the new sibling.\n    let c1 = node.children;\n    let c2 = next.children;\n    for (let i = MIN_NODE_WIDTH, n = c1.length; i < n; ++i) {\n      c2.push(c1[i]);\n    }\n    c1.length = MIN_NODE_WIDTH;\n\n    // Move the items to the new sibling.\n    let v1 = node.items;\n    let v2 = next.items;\n    for (let i = MIN_NODE_WIDTH, n = v1.length; i < n; ++i) {\n      v2.push(v1[i]);\n    }\n    v1.length = MIN_NODE_WIDTH;\n\n    // Update the dirty sizes of the nodes.\n    updateSizes(node, MIN_NODE_WIDTH);\n    updateSizes(next, 0);\n\n    // Return the new next sibling.\n    return next;\n  }\n\n  /**\n   * Join a child node of a branch with one of its siblings.\n   *\n   * @param node - The branch node of interest.\n   *\n   * @param i - The index of the child node of interest.\n   *\n   * @returns The first modified index.\n   *\n   * #### Notes\n   * This may cause the branch to become underfull.\n   */\n  function joinChild<T>(node: BranchNode<T>, i: number): number {\n    // Fetch the child to be joined.\n    let child = node.children[i];\n\n    // Fetch the relevant sibling.\n    let sibling = i === 0 ? node.children[i + 1] : node.children[i - 1];\n\n    // Compute the flags which control the join behavior.\n    let hasNext = i === 0;\n    let isLeaf = child.type === NodeType.Leaf;\n    let hasExtra = sibling.width > MIN_NODE_WIDTH;\n\n    // Join case #1: steal from next sibling leaf\n    if (isLeaf && hasExtra && hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Steal an item.\n      c.items.push(s.items.shift()!);\n\n      // Update the branch items.\n      node.items[i + 1] = s.items[0];\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #2: steal from previous sibling leaf\n    if (isLeaf && hasExtra && !hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Steal an item.\n      c.items.unshift(s.items.pop()!);\n\n      // Update the branch items.\n      node.items[i] = c.items[0];\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // Join case #3: merge with next sibling leaf\n    if (isLeaf && !hasExtra && hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Merge items.\n      s.items.unshift(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i + 1);\n\n      // Patch up the sibling links.\n      if (c.prev) c.prev.next = s;\n      s.prev = c.prev;\n\n      // Clear the original child.\n      clear(c);\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #4: merge with previous sibling leaf\n    if (isLeaf && !hasExtra && !hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Merge items.\n      s.items.push(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i);\n\n      // Patch up the sibling links.\n      if (c.next) c.next.prev = s;\n      s.next = c.next;\n\n      // Clear the original child.\n      clear(c);\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // Join case #5: steal from next sibling branch\n    if (!isLeaf && hasExtra && hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Steal a child from the next sibling.\n      c.children.push(s.children.shift()!);\n\n      // Steal an item from the next sibling.\n      c.items.push(s.items.shift()!);\n\n      // Update the branch items.\n      node.items[i + 1] = s.items[0];\n\n      // Update the sibling sizes.\n      updateSizes(c, c.width - 1);\n      updateSizes(s, 0);\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #6: steal from previous sibling branch\n    if (!isLeaf && hasExtra && !hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Steal a child from the previous sibling.\n      c.children.unshift(s.children.pop()!);\n\n      // Steal an item from the previous sibling.\n      c.items.unshift(s.items.pop()!);\n\n      // Update the branch items.\n      node.items[i] = c.items[0];\n\n      // Update the sibling sizes.\n      updateSizes(c, 0);\n      updateSizes(s, s.width - 1);\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // Join case #7: merge with next sibling branch\n    if (!isLeaf && !hasExtra && hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Merge the children with the next sibling.\n      s.children.unshift(...c.children);\n\n      // Merge the items with the next sibling.\n      s.items.unshift(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i + 1);\n\n      // Update the sibling sizes.\n      updateSizes(s, 0);\n\n      // Clear the original child but, not its children.\n      c.children.length = 0;\n      clear(c);\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #8: merge with previous sibling branch\n    if (!isLeaf && !hasExtra && !hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Merge the children with the previous sibling.\n      s.children.push(...c.children);\n\n      // Merge the items with the previous sibling.\n      s.items.push(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i);\n\n      // Update the sibling sizes.\n      updateSizes(s, 0);\n\n      // Clear the original child, but not its children.\n      c.children.length = 0;\n      clear(c);\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // One of the above cases must match.\n    throw 'unreachable';\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  each,\n  IIterable,\n  IIterator,\n  IRetroable,\n  IterableOrArrayLike\n} from '@lumino/algorithm';\n\n/**\n * A generic doubly-linked list.\n */\nexport class LinkedList<T> implements IIterable<T>, IRetroable<T> {\n  /**\n   * Whether the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get isEmpty(): boolean {\n    return this._size === 0;\n  }\n\n  /**\n   * The size of the list.\n   *\n   * #### Complexity\n   * `O(1)`\n   *\n   * #### Notes\n   * This is equivalent to `length`.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * The length of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `size`.\n   *\n   * This property is deprecated.\n   */\n  get length(): number {\n    return this._size;\n  }\n\n  /**\n   * The first value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get first(): T | undefined {\n    return this._first ? this._first.value : undefined;\n  }\n\n  /**\n   * The last value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get last(): T | undefined {\n    return this._last ? this._last.value : undefined;\n  }\n\n  /**\n   * The first node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get firstNode(): LinkedList.INode<T> | null {\n    return this._first;\n  }\n\n  /**\n   * The last node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get lastNode(): LinkedList.INode<T> | null {\n    return this._last;\n  }\n\n  /**\n   * Create an iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the first value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  iter(): IIterator<T> {\n    return new LinkedList.ForwardValueIterator<T>(this._first);\n  }\n\n  /**\n   * Create a reverse iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the last value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  retro(): IIterator<T> {\n    return new LinkedList.RetroValueIterator<T>(this._last);\n  }\n\n  /**\n   * Create an iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the first node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  nodes(): IIterator<LinkedList.INode<T>> {\n    return new LinkedList.ForwardNodeIterator<T>(this._first);\n  }\n\n  /**\n   * Create a reverse iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the last node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  retroNodes(): IIterator<LinkedList.INode<T>> {\n    return new LinkedList.RetroNodeIterator<T>(this._last);\n  }\n\n  /**\n   * Assign new values to the list, replacing all current values.\n   *\n   * @param values - The values to assign to the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  assign(values: IterableOrArrayLike<T>): void {\n    this.clear();\n    each(values, value => {\n      this.addLast(value);\n    });\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addLast`.\n   */\n  push(value: T): void {\n    this.addLast(value);\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeLast`.\n   */\n  pop(): T | undefined {\n    return this.removeLast();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addFirst`.\n   */\n  shift(value: T): void {\n    this.addFirst(value);\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeFirst`.\n   */\n  unshift(): T | undefined {\n    return this.removeFirst();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addFirst(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._first) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.next = this._first;\n      this._first.prev = node;\n      this._first = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addLast(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._last) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.prev = this._last;\n      this._last.next = node;\n      this._last = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value before a specific node in the list.\n   *\n   * @param value - The value to insert before the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertBefore(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._first) {\n      return this.addFirst(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let prev = _ref.prev!;\n    node.next = _ref;\n    node.prev = prev;\n    _ref.prev = node;\n    prev.next = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value after a specific node in the list.\n   *\n   * @param value - The value to insert after the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertAfter(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._last) {\n      return this.addLast(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let next = _ref.next!;\n    node.next = next;\n    node.prev = _ref;\n    _ref.next = node;\n    next.prev = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeFirst(): T | undefined {\n    let node = this._first;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._first = node.next;\n      this._first!.prev = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeLast(): T | undefined {\n    let node = this._last;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._first) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._last = node.prev;\n      this._last!.next = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove a specific node from the list.\n   *\n   * @param node - The node to remove from the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * The node must be owned by the list.\n   */\n  removeNode(node: LinkedList.INode<T>): void {\n    if (!(node instanceof Private.LinkedListNode) || node.list !== this) {\n      throw new Error('Node is not owned by the list.');\n    }\n    let _node = node as Private.LinkedListNode<T>;\n    if (_node === this._first && _node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else if (_node === this._first) {\n      this._first = _node.next;\n      this._first!.prev = null;\n    } else if (_node === this._last) {\n      this._last = _node.prev;\n      this._last!.next = null;\n    } else {\n      _node.next!.prev = _node.prev;\n      _node.prev!.next = _node.next;\n    }\n    _node.list = null;\n    _node.next = null;\n    _node.prev = null;\n    this._size--;\n  }\n\n  /**\n   * Remove all values from the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  clear(): void {\n    let node = this._first;\n    while (node) {\n      let next = node.next;\n      node.list = null;\n      node.prev = null;\n      node.next = null;\n      node = next;\n    }\n    this._first = null;\n    this._last = null;\n    this._size = 0;\n  }\n\n  private _first: Private.LinkedListNode<T> | null = null;\n  private _last: Private.LinkedListNode<T> | null = null;\n  private _size = 0;\n}\n\n/**\n * The namespace for the `LinkedList` class statics.\n */\nexport namespace LinkedList {\n  /**\n   * An object which represents a node in a linked list.\n   *\n   * #### Notes\n   * User code will not create linked list nodes directly. Nodes\n   * are created automatically when values are added to a list.\n   */\n  export interface INode<T> {\n    /**\n     * The linked list which created and owns the node.\n     *\n     * This will be `null` when the node is removed from the list.\n     */\n    readonly list: LinkedList<T> | null;\n\n    /**\n     * The next node in the list.\n     *\n     * This will be `null` when the node is the last node in the list\n     * or when the node is removed from the list.\n     */\n    readonly next: INode<T> | null;\n\n    /**\n     * The previous node in the list.\n     *\n     * This will be `null` when the node is the first node in the list\n     * or when the node is removed from the list.\n     */\n    readonly prev: INode<T> | null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n  }\n\n  /**\n   * Create a linked list from an iterable of values.\n   *\n   * @param values - The iterable or array-like object of interest.\n   *\n   * @returns A new linked list initialized with the given values.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  export function from<T>(values: IterableOrArrayLike<T>): LinkedList<T> {\n    let list = new LinkedList<T>();\n    list.assign(values);\n    return list;\n  }\n\n  /**\n   * A forward iterator for values in a linked list.\n   */\n  export class ForwardValueIterator<T> implements IIterator<T> {\n    /**\n     * Construct a forward value iterator.\n     *\n     * @param node - The first node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new ForwardValueIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.next;\n      return node.value;\n    }\n\n    private _node: INode<T> | null;\n  }\n\n  /**\n   * A reverse iterator for values in a linked list.\n   */\n  export class RetroValueIterator<T> implements IIterator<T> {\n    /**\n     * Construct a retro value iterator.\n     *\n     * @param node - The last node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new RetroValueIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.prev;\n      return node.value;\n    }\n\n    private _node: INode<T> | null;\n  }\n\n  /**\n   * A forward iterator for nodes in a linked list.\n   */\n  export class ForwardNodeIterator<T> implements IIterator<INode<T>> {\n    /**\n     * Construct a forward node iterator.\n     *\n     * @param node - The first node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<INode<T>> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<INode<T>> {\n      return new ForwardNodeIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): INode<T> | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.next;\n      return node;\n    }\n\n    private _node: INode<T> | null;\n  }\n\n  /**\n   * A reverse iterator for nodes in a linked list.\n   */\n  export class RetroNodeIterator<T> implements IIterator<INode<T>> {\n    /**\n     * Construct a retro node iterator.\n     *\n     * @param node - The last node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<INode<T>> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<INode<T>> {\n      return new RetroNodeIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): INode<T> | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.prev;\n      return node;\n    }\n\n    private _node: INode<T> | null;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The internal linked list node implementation.\n   */\n  export class LinkedListNode<T> {\n    /**\n     * The linked list which created and owns the node.\n     */\n    list: LinkedList<T> | null = null;\n\n    /**\n     * The next node in the list.\n     */\n    next: LinkedListNode<T> | null = null;\n\n    /**\n     * The previous node in the list.\n     */\n    prev: LinkedListNode<T> | null = null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n\n    /**\n     * Construct a new linked list node.\n     *\n     * @param list - The list which owns the node.\n     *\n     * @param value - The value for the link.\n     */\n    constructor(list: LinkedList<T>, value: T) {\n      this.list = list;\n      this.value = value;\n    }\n  }\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ArrayExt, each, every, retro, some } from '@lumino/algorithm';\n\nimport { LinkedList } from '@lumino/collections';\n\n/**\n * A message which can be delivered to a message handler.\n *\n * #### Notes\n * This class may be subclassed to create complex message types.\n */\nexport class Message {\n  /**\n   * Construct a new message.\n   *\n   * @param type - The type of the message.\n   */\n  constructor(type: string) {\n    this.type = type;\n  }\n\n  /**\n   * The type of the message.\n   *\n   * #### Notes\n   * The `type` of a message should be related directly to its actual\n   * runtime type. This means that `type` can and will be used to cast\n   * the message to the relevant derived `Message` subtype.\n   */\n  readonly type: string;\n\n  /**\n   * Test whether the message is conflatable.\n   *\n   * #### Notes\n   * Message conflation is an advanced topic. Most message types will\n   * not make use of this feature.\n   *\n   * If a conflatable message is posted to a handler while another\n   * conflatable message of the same `type` has already been posted\n   * to the handler, the `conflate()` method of the existing message\n   * will be invoked. If that method returns `true`, the new message\n   * will not be enqueued. This allows messages to be compressed, so\n   * that only a single instance of the message type is processed per\n   * cycle, no matter how many times messages of that type are posted.\n   *\n   * Custom message types may reimplement this property.\n   *\n   * The default implementation is always `false`.\n   */\n  get isConflatable(): boolean {\n    return false;\n  }\n\n  /**\n   * Conflate this message with another message of the same `type`.\n   *\n   * @param other - A conflatable message of the same `type`.\n   *\n   * @returns `true` if the message was successfully conflated, or\n   *   `false` otherwise.\n   *\n   * #### Notes\n   * Message conflation is an advanced topic. Most message types will\n   * not make use of this feature.\n   *\n   * This method is called automatically by the message loop when the\n   * given message is posted to the handler paired with this message.\n   * This message will already be enqueued and conflatable, and the\n   * given message will have the same `type` and also be conflatable.\n   *\n   * This method should merge the state of the other message into this\n   * message as needed so that when this message is finally delivered\n   * to the handler, it receives the most up-to-date information.\n   *\n   * If this method returns `true`, it signals that the other message\n   * was successfully conflated and that message will not be enqueued.\n   *\n   * If this method returns `false`, the other message will be enqueued\n   * for normal delivery.\n   *\n   * Custom message types may reimplement this method.\n   *\n   * The default implementation always returns `false`.\n   */\n  conflate(other: Message): boolean {\n    return false;\n  }\n}\n\n/**\n * A convenience message class which conflates automatically.\n *\n * #### Notes\n * Message conflation is an advanced topic. Most user code will not\n * make use of this class.\n *\n * This message class is useful for creating message instances which\n * should be conflated, but which have no state other than `type`.\n *\n * If conflation of stateful messages is required, a custom `Message`\n * subclass should be created.\n */\nexport class ConflatableMessage extends Message {\n  /**\n   * Test whether the message is conflatable.\n   *\n   * #### Notes\n   * This property is always `true`.\n   */\n  get isConflatable(): boolean {\n    return true;\n  }\n\n  /**\n   * Conflate this message with another message of the same `type`.\n   *\n   * #### Notes\n   * This method always returns `true`.\n   */\n  conflate(other: ConflatableMessage): boolean {\n    return true;\n  }\n}\n\n/**\n * An object which handles messages.\n *\n * #### Notes\n * A message handler is a simple way of defining a type which can act\n * upon on a large variety of external input without requiring a large\n * abstract API surface. This is particularly useful in the context of\n * widget frameworks where the number of distinct message types can be\n * unbounded.\n */\nexport interface IMessageHandler {\n  /**\n   * Process a message sent to the handler.\n   *\n   * @param msg - The message to be processed.\n   */\n  processMessage(msg: Message): void;\n}\n\n/**\n * An object which intercepts messages sent to a message handler.\n *\n * #### Notes\n * A message hook is useful for intercepting or spying on messages\n * sent to message handlers which were either not created by the\n * consumer, or when subclassing the handler is not feasible.\n *\n * If `messageHook` returns `false`, no other message hooks will be\n * invoked and the message will not be delivered to the handler.\n *\n * If all installed message hooks return `true`, the message will\n * be delivered to the handler for processing.\n *\n * **See also:** [[installMessageHook]] and [[removeMessageHook]]\n */\nexport interface IMessageHook {\n  /**\n   * Intercept a message sent to a message handler.\n   *\n   * @param handler - The target handler of the message.\n   *\n   * @param msg - The message to be sent to the handler.\n   *\n   * @returns `true` if the message should continue to be processed\n   *   as normal, or `false` if processing should cease immediately.\n   */\n  messageHook(handler: IMessageHandler, msg: Message): boolean;\n}\n\n/**\n * A type alias for message hook object or function.\n *\n * #### Notes\n * The signature and semantics of a message hook function are the same\n * as the `messageHook` method of [[IMessageHook]].\n */\nexport type MessageHook =\n  | IMessageHook\n  | ((handler: IMessageHandler, msg: Message) => boolean);\n\n/**\n * The namespace for the global singleton message loop.\n */\nexport namespace MessageLoop {\n  /**\n   * Send a message to a message handler to process immediately.\n   *\n   * @param handler - The handler which should process the message.\n   *\n   * @param msg - The message to deliver to the handler.\n   *\n   * #### Notes\n   * The message will first be sent through any installed message hooks\n   * for the handler. If the message passes all hooks, it will then be\n   * delivered to the `processMessage` method of the handler.\n   *\n   * The message will not be conflated with pending posted messages.\n   *\n   * Exceptions in hooks and handlers will be caught and logged.\n   */\n  export function sendMessage(handler: IMessageHandler, msg: Message): void {\n    // Lookup the message hooks for the handler.\n    let hooks = messageHooks.get(handler);\n\n    // Handle the common case of no installed hooks.\n    if (!hooks || hooks.length === 0) {\n      invokeHandler(handler, msg);\n      return;\n    }\n\n    // Invoke the message hooks starting with the newest first.\n    let passed = every(retro(hooks), hook => {\n      return hook ? invokeHook(hook, handler, msg) : true;\n    });\n\n    // Invoke the handler if the message passes all hooks.\n    if (passed) {\n      invokeHandler(handler, msg);\n    }\n  }\n\n  /**\n   * Post a message to a message handler to process in the future.\n   *\n   * @param handler - The handler which should process the message.\n   *\n   * @param msg - The message to post to the handler.\n   *\n   * #### Notes\n   * The message will be conflated with the pending posted messages for\n   * the handler, if possible. If the message is not conflated, it will\n   * be queued for normal delivery on the next cycle of the event loop.\n   *\n   * Exceptions in hooks and handlers will be caught and logged.\n   */\n  export function postMessage(handler: IMessageHandler, msg: Message): void {\n    // Handle the common case of a non-conflatable message.\n    if (!msg.isConflatable) {\n      enqueueMessage(handler, msg);\n      return;\n    }\n\n    // Conflate the message with an existing message if possible.\n    let conflated = some(messageQueue, posted => {\n      if (posted.handler !== handler) {\n        return false;\n      }\n      if (!posted.msg) {\n        return false;\n      }\n      if (posted.msg.type !== msg.type) {\n        return false;\n      }\n      if (!posted.msg.isConflatable) {\n        return false;\n      }\n      return posted.msg.conflate(msg);\n    });\n\n    // Enqueue the message if it was not conflated.\n    if (!conflated) {\n      enqueueMessage(handler, msg);\n    }\n  }\n\n  /**\n   * Install a message hook for a message handler.\n   *\n   * @param handler - The message handler of interest.\n   *\n   * @param hook - The message hook to install.\n   *\n   * #### Notes\n   * A message hook is invoked before a message is delivered to the\n   * handler. If the hook returns `false`, no other hooks will be\n   * invoked and the message will not be delivered to the handler.\n   *\n   * The most recently installed message hook is executed first.\n   *\n   * If the hook is already installed, this is a no-op.\n   */\n  export function installMessageHook(\n    handler: IMessageHandler,\n    hook: MessageHook\n  ): void {\n    // Lookup the hooks for the handler.\n    let hooks = messageHooks.get(handler);\n\n    // Bail early if the hook is already installed.\n    if (hooks && hooks.indexOf(hook) !== -1) {\n      return;\n    }\n\n    // Add the hook to the end, so it will be the first to execute.\n    if (!hooks) {\n      messageHooks.set(handler, [hook]);\n    } else {\n      hooks.push(hook);\n    }\n  }\n\n  /**\n   * Remove an installed message hook for a message handler.\n   *\n   * @param handler - The message handler of interest.\n   *\n   * @param hook - The message hook to remove.\n   *\n   * #### Notes\n   * It is safe to call this function while the hook is executing.\n   *\n   * If the hook is not installed, this is a no-op.\n   */\n  export function removeMessageHook(\n    handler: IMessageHandler,\n    hook: MessageHook\n  ): void {\n    // Lookup the hooks for the handler.\n    let hooks = messageHooks.get(handler);\n\n    // Bail early if the hooks do not exist.\n    if (!hooks) {\n      return;\n    }\n\n    // Lookup the index of the hook and bail if not found.\n    let i = hooks.indexOf(hook);\n    if (i === -1) {\n      return;\n    }\n\n    // Clear the hook and schedule a cleanup of the array.\n    hooks[i] = null;\n    scheduleCleanup(hooks);\n  }\n\n  /**\n   * Clear all message data associated with a message handler.\n   *\n   * @param handler - The message handler of interest.\n   *\n   * #### Notes\n   * This will clear all posted messages and hooks for the handler.\n   */\n  export function clearData(handler: IMessageHandler): void {\n    // Lookup the hooks for the handler.\n    let hooks = messageHooks.get(handler);\n\n    // Clear all messsage hooks for the handler.\n    if (hooks && hooks.length > 0) {\n      ArrayExt.fill(hooks, null);\n      scheduleCleanup(hooks);\n    }\n\n    // Clear all posted messages for the handler.\n    each(messageQueue, posted => {\n      if (posted.handler === handler) {\n        posted.handler = null;\n        posted.msg = null;\n      }\n    });\n  }\n\n  /**\n   * Process the pending posted messages in the queue immediately.\n   *\n   * #### Notes\n   * This function is useful when posted messages must be processed\n   * immediately, instead of on the next animation frame.\n   *\n   * This function should normally not be needed, but it may be\n   * required to work around certain browser idiosyncrasies.\n   *\n   * Recursing into this function is a no-op.\n   */\n  export function flush(): void {\n    // Bail if recursion is detected or if there is no pending task.\n    if (flushGuard || loopTaskID === 0) {\n      return;\n    }\n\n    // Unschedule the pending loop task.\n    unschedule(loopTaskID);\n\n    // Run the message loop within the recursion guard.\n    flushGuard = true;\n    runMessageLoop();\n    flushGuard = false;\n  }\n\n  /**\n   * A type alias for the exception handler function.\n   */\n  export type ExceptionHandler = (err: Error) => void;\n\n  /**\n   * Get the message loop exception handler.\n   *\n   * @returns The current exception handler.\n   *\n   * #### Notes\n   * The default exception handler is `console.error`.\n   */\n  export function getExceptionHandler(): ExceptionHandler {\n    return exceptionHandler;\n  }\n\n  /**\n   * Set the message loop exception handler.\n   *\n   * @param handler - The function to use as the exception handler.\n   *\n   * @returns The old exception handler.\n   *\n   * #### Notes\n   * The exception handler is invoked when a message handler or a\n   * message hook throws an exception.\n   */\n  export function setExceptionHandler(\n    handler: ExceptionHandler\n  ): ExceptionHandler {\n    let old = exceptionHandler;\n    exceptionHandler = handler;\n    return old;\n  }\n\n  /**\n   * A type alias for a posted message pair.\n   */\n  type PostedMessage = { handler: IMessageHandler | null; msg: Message | null };\n\n  /**\n   * The queue of posted message pairs.\n   */\n  const messageQueue = new LinkedList<PostedMessage>();\n\n  /**\n   * A mapping of handler to array of installed message hooks.\n   */\n  const messageHooks = new WeakMap<\n    IMessageHandler,\n    Array<MessageHook | null>\n  >();\n\n  /**\n   * A set of message hook arrays which are pending cleanup.\n   */\n  const dirtySet = new Set<Array<MessageHook | null>>();\n\n  /**\n   * The message loop exception handler.\n   */\n  let exceptionHandler: ExceptionHandler = (err: Error) => {\n    console.error(err);\n  };\n\n  type ScheduleHandle = number | any; //  requestAnimationFrame (number) and setImmediate (any)\n\n  /**\n   * The id of the pending loop task animation frame.\n   */\n  let loopTaskID: ScheduleHandle = 0;\n\n  /**\n   * A guard flag to prevent flush recursion.\n   */\n  let flushGuard = false;\n\n  /**\n   * A function to schedule an event loop callback.\n   */\n  const schedule = ((): ScheduleHandle => {\n    let ok = typeof requestAnimationFrame === 'function';\n    return ok ? requestAnimationFrame : setImmediate;\n  })();\n\n  /**\n   * A function to unschedule an event loop callback.\n   */\n  const unschedule = (() => {\n    let ok = typeof cancelAnimationFrame === 'function';\n    return ok ? cancelAnimationFrame : clearImmediate;\n  })();\n\n  /**\n   * Invoke a message hook with the specified handler and message.\n   *\n   * Returns the result of the hook, or `true` if the hook throws.\n   *\n   * Exceptions in the hook will be caught and logged.\n   */\n  function invokeHook(\n    hook: MessageHook,\n    handler: IMessageHandler,\n    msg: Message\n  ): boolean {\n    let result = true;\n    try {\n      if (typeof hook === 'function') {\n        result = hook(handler, msg);\n      } else {\n        result = hook.messageHook(handler, msg);\n      }\n    } catch (err) {\n      exceptionHandler(err);\n    }\n    return result;\n  }\n\n  /**\n   * Invoke a message handler with the specified message.\n   *\n   * Exceptions in the handler will be caught and logged.\n   */\n  function invokeHandler(handler: IMessageHandler, msg: Message): void {\n    try {\n      handler.processMessage(msg);\n    } catch (err) {\n      exceptionHandler(err);\n    }\n  }\n\n  /**\n   * Add a message to the end of the message queue.\n   *\n   * This will automatically schedule a run of the message loop.\n   */\n  function enqueueMessage(handler: IMessageHandler, msg: Message): void {\n    // Add the posted message to the queue.\n    messageQueue.addLast({ handler, msg });\n\n    // Bail if a loop task is already pending.\n    if (loopTaskID !== 0) {\n      return;\n    }\n\n    // Schedule a run of the message loop.\n    loopTaskID = schedule(runMessageLoop);\n  }\n\n  /**\n   * Run an iteration of the message loop.\n   *\n   * This will process all pending messages in the queue. If a message\n   * is added to the queue while the message loop is running, it will\n   * be processed on the next cycle of the loop.\n   */\n  function runMessageLoop(): void {\n    // Clear the task ID so the next loop can be scheduled.\n    loopTaskID = 0;\n\n    // If the message queue is empty, there is nothing else to do.\n    if (messageQueue.isEmpty) {\n      return;\n    }\n\n    // Add a sentinel value to the end of the queue. The queue will\n    // only be processed up to the sentinel. Messages posted during\n    // this cycle will execute on the next cycle.\n    let sentinel: PostedMessage = { handler: null, msg: null };\n    messageQueue.addLast(sentinel);\n\n    // Enter the message loop.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Remove the first posted message in the queue.\n      let posted = messageQueue.removeFirst()!;\n\n      // If the value is the sentinel, exit the loop.\n      if (posted === sentinel) {\n        return;\n      }\n\n      // Dispatch the message if it has not been cleared.\n      if (posted.handler && posted.msg) {\n        sendMessage(posted.handler, posted.msg);\n      }\n    }\n  }\n\n  /**\n   * Schedule a cleanup of a message hooks array.\n   *\n   * This will add the array to the dirty set and schedule a deferred\n   * cleanup of the array contents. On cleanup, any `null` hook will\n   * be removed from the array.\n   */\n  function scheduleCleanup(hooks: Array<MessageHook | null>): void {\n    if (dirtySet.size === 0) {\n      schedule(cleanupDirtySet);\n    }\n    dirtySet.add(hooks);\n  }\n\n  /**\n   * Cleanup the message hook arrays in the dirty set.\n   *\n   * This function should only be invoked asynchronously, when the\n   * stack frame is guaranteed to not be on the path of user code.\n   */\n  function cleanupDirtySet(): void {\n    dirtySet.forEach(cleanupHooks);\n    dirtySet.clear();\n  }\n\n  /**\n   * Cleanup the dirty hooks in a message hooks array.\n   *\n   * This will remove any `null` hook from the array.\n   *\n   * This function should only be invoked asynchronously, when the\n   * stack frame is guaranteed to not be on the path of user code.\n   */\n  function cleanupHooks(hooks: Array<MessageHook | null>): void {\n    ArrayExt.removeAllWhere(hooks, isNull);\n  }\n\n  /**\n   * Test whether a value is `null`.\n   */\n  function isNull<T>(value: T | null): boolean {\n    return value === null;\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * The namespace for clipboard related functionality.\n */\nexport namespace ClipboardExt {\n  /**\n   * Copy text to the system clipboard.\n   *\n   * @param text - The text to copy to the clipboard.\n   */\n  export function copyText(text: string): void {\n    // Fetch the document body.\n    const body = document.body;\n\n    // Set up the clipboard event listener.\n    const handler = (event: ClipboardEvent) => {\n      // Stop the event propagation.\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Set the clipboard data.\n      event.clipboardData!.setData('text', text);\n\n      // Remove the event listener.\n      body.removeEventListener('copy', handler, true);\n    };\n\n    // Add the event listener.\n    body.addEventListener('copy', handler, true);\n\n    // Trigger the event.\n    document.execCommand('copy');\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * The namespace for element related utilities.\n */\nexport namespace ElementExt {\n  /**\n   * An object which holds the border and padding data for an element.\n   */\n  export interface IBoxSizing {\n    /**\n     * The top border width, in pixels.\n     */\n    borderTop: number;\n\n    /**\n     * The left border width, in pixels.\n     */\n    borderLeft: number;\n\n    /**\n     * The right border width, in pixels.\n     */\n    borderRight: number;\n\n    /**\n     * The bottom border width, in pixels.\n     */\n    borderBottom: number;\n\n    /**\n     * The top padding width, in pixels.\n     */\n    paddingTop: number;\n\n    /**\n     * The left padding width, in pixels.\n     */\n    paddingLeft: number;\n\n    /**\n     * The right padding width, in pixels.\n     */\n    paddingRight: number;\n\n    /**\n     * The bottom padding width, in pixels.\n     */\n    paddingBottom: number;\n\n    /**\n     * The sum of horizontal border and padding.\n     */\n    horizontalSum: number;\n\n    /**\n     * The sum of vertical border and padding.\n     */\n    verticalSum: number;\n  }\n\n  /**\n   * Compute the box sizing for an element.\n   *\n   * @param element - The element of interest.\n   *\n   * @returns The box sizing data for the specified element.\n   */\n  export function boxSizing(element: Element): IBoxSizing {\n    let style = window.getComputedStyle(element);\n    let bt = parseFloat(style.borderTopWidth!) || 0;\n    let bl = parseFloat(style.borderLeftWidth!) || 0;\n    let br = parseFloat(style.borderRightWidth!) || 0;\n    let bb = parseFloat(style.borderBottomWidth!) || 0;\n    let pt = parseFloat(style.paddingTop!) || 0;\n    let pl = parseFloat(style.paddingLeft!) || 0;\n    let pr = parseFloat(style.paddingRight!) || 0;\n    let pb = parseFloat(style.paddingBottom!) || 0;\n    let hs = bl + pl + pr + br;\n    let vs = bt + pt + pb + bb;\n    return {\n      borderTop: bt,\n      borderLeft: bl,\n      borderRight: br,\n      borderBottom: bb,\n      paddingTop: pt,\n      paddingLeft: pl,\n      paddingRight: pr,\n      paddingBottom: pb,\n      horizontalSum: hs,\n      verticalSum: vs\n    };\n  }\n\n  /**\n   * An object which holds the min and max size data for an element.\n   */\n  export interface ISizeLimits {\n    /**\n     * The minimum width, in pixels.\n     */\n    minWidth: number;\n\n    /**\n     * The minimum height, in pixels.\n     */\n    minHeight: number;\n\n    /**\n     * The maximum width, in pixels.\n     */\n    maxWidth: number;\n\n    /**\n     * The maximum height, in pixels.\n     */\n    maxHeight: number;\n  }\n\n  /**\n   * Compute the size limits for an element.\n   *\n   * @param element - The element of interest.\n   *\n   * @returns The size limit data for the specified element.\n   */\n  export function sizeLimits(element: Element): ISizeLimits {\n    let style = window.getComputedStyle(element);\n    let minWidth = parseFloat(style.minWidth!) || 0;\n    let minHeight = parseFloat(style.minHeight!) || 0;\n    let maxWidth = parseFloat(style.maxWidth!) || Infinity;\n    let maxHeight = parseFloat(style.maxHeight!) || Infinity;\n    maxWidth = Math.max(minWidth, maxWidth);\n    maxHeight = Math.max(minHeight, maxHeight);\n    return { minWidth, minHeight, maxWidth, maxHeight };\n  }\n\n  /**\n   * Test whether a client position lies within an element.\n   *\n   * @param element - The DOM element of interest.\n   *\n   * @param clientX - The client X coordinate of interest.\n   *\n   * @param clientY - The client Y coordinate of interest.\n   *\n   * @returns Whether the point is within the given element.\n   */\n  export function hitTest(\n    element: Element,\n    clientX: number,\n    clientY: number\n  ): boolean {\n    let rect = element.getBoundingClientRect();\n    return (\n      clientX >= rect.left &&\n      clientX < rect.right &&\n      clientY >= rect.top &&\n      clientY < rect.bottom\n    );\n  }\n\n  /**\n   * Vertically scroll an element into view if needed.\n   *\n   * @param area - The scroll area element.\n   *\n   * @param element - The element of interest.\n   *\n   * #### Notes\n   * This follows the \"nearest\" behavior of the native `scrollIntoView`\n   * method, which is not supported by all browsers.\n   * https://drafts.csswg.org/cssom-view/#element-scrolling-members\n   *\n   * If the element fully covers the visible area or is fully contained\n   * within the visible area, no scrolling will take place. Otherwise,\n   * the nearest edges of the area and element are aligned.\n   */\n  export function scrollIntoViewIfNeeded(\n    area: Element,\n    element: Element\n  ): void {\n    let ar = area.getBoundingClientRect();\n    let er = element.getBoundingClientRect();\n    if (er.top <= ar.top && er.bottom >= ar.bottom) {\n      return;\n    }\n    if (er.top < ar.top && er.height <= ar.height) {\n      area.scrollTop -= ar.top - er.top;\n      return;\n    }\n    if (er.bottom > ar.bottom && er.height >= ar.height) {\n      area.scrollTop -= ar.top - er.top;\n      return;\n    }\n    if (er.top < ar.top && er.height > ar.height) {\n      area.scrollTop -= ar.bottom - er.bottom;\n      return;\n    }\n    if (er.bottom > ar.bottom && er.height < ar.height) {\n      area.scrollTop -= ar.bottom - er.bottom;\n      return;\n    }\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * The namespace for platform related utilities.\n */\nexport namespace Platform {\n  /**\n   * A flag indicating whether the platform is Mac.\n   */\n  export const IS_MAC = !!navigator.platform.match(/Mac/i);\n\n  /**\n   * A flag indicating whether the platform is Windows.\n   */\n  export const IS_WIN = !!navigator.platform.match(/Win/i);\n\n  /**\n   * A flag indicating whether the browser is IE.\n   */\n  export const IS_IE = /Trident/.test(navigator.userAgent);\n\n  /**\n   * A flag indicating whether the browser is Edge.\n   */\n  export const IS_EDGE = /Edge/.test(navigator.userAgent);\n\n  /**\n   * Test whether the `accel` key is pressed.\n   *\n   * @param event - The keyboard or mouse event of interest.\n   *\n   * @returns Whether the `accel` key is pressed.\n   *\n   * #### Notes\n   * On Mac the `accel` key is the command key. On all other\n   * platforms the `accel` key is the control key.\n   */\n  export function accelKey(event: KeyboardEvent | MouseEvent): boolean {\n    return IS_MAC ? event.metaKey : event.ctrlKey;\n  }\n}\n", "// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n/**\n * The namespace for selector related utilities.\n */\nexport namespace Selector {\n  /**\n   * Calculate the specificity of a single CSS selector.\n   *\n   * @param selector - The CSS selector of interest.\n   *\n   * @returns The specificity of the selector.\n   *\n   * #### Undefined Behavior\n   * The selector is invalid.\n   *\n   * #### Notes\n   * This is based on https://www.w3.org/TR/css3-selectors/#specificity\n   *\n   * A larger number represents a more specific selector.\n   *\n   * The smallest possible specificity is `0`.\n   *\n   * The result is represented as a hex number `0x<aa><bb><cc>` where\n   * each component is the count of the respective selector clause.\n   *\n   * If the selector contains commas, only the first clause is used.\n   *\n   * The computed result is cached, so subsequent calculations for the\n   * same selector are extremely fast.\n   */\n  export function calculateSpecificity(selector: string): number {\n    if (selector in Private.specificityCache) {\n      return Private.specificityCache[selector];\n    }\n    let result = Private.calculateSingle(selector);\n    return (Private.specificityCache[selector] = result);\n  }\n\n  /**\n   * Test whether a selector is a valid CSS selector.\n   *\n   * @param selector - The CSS selector of interest.\n   *\n   * @returns `true` if the selector is valid, `false` otherwise.\n   *\n   * #### Notes\n   * The computed result is cached, so subsequent tests for the same\n   * selector are extremely fast.\n   */\n  export function isValid(selector: string): boolean {\n    if (selector in Private.validityCache) {\n      return Private.validityCache[selector];\n    }\n    let result = true;\n    try {\n      Private.testElem.querySelector(selector);\n    } catch (err) {\n      result = false;\n    }\n    return (Private.validityCache[selector] = result);\n  }\n\n  /**\n   * Test whether an element matches a CSS selector.\n   *\n   * @param element - The element of interest.\n   *\n   * @param selector - The valid CSS selector of interest.\n   *\n   * @returns `true` if the element is a match, `false` otherwise.\n   *\n   * #### Notes\n   * This function uses the builtin browser capabilities when possible,\n   * falling back onto a document query otherwise.\n   */\n  export function matches(element: Element, selector: string): boolean {\n    return Private.protoMatchFunc.call(element, selector);\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A type alias for an object hash.\n   */\n  export type StringMap<T> = { [key: string]: T };\n\n  /**\n   * A cache of computed selector specificity values.\n   */\n  export const specificityCache: StringMap<number> = Object.create(null);\n\n  /**\n   * A cache of computed selector validity.\n   */\n  export const validityCache: StringMap<boolean> = Object.create(null);\n\n  /**\n   * An empty element for testing selector validity.\n   */\n  export const testElem = document.createElement('div');\n\n  /**\n   * A cross-browser CSS selector matching prototype function.\n   */\n  export const protoMatchFunc: Function = (() => {\n    let proto = Element.prototype as any;\n    return (\n      proto.matches ||\n      proto.matchesSelector ||\n      proto.mozMatchesSelector ||\n      proto.msMatchesSelector ||\n      proto.oMatchesSelector ||\n      proto.webkitMatchesSelector ||\n      function (selector: string) {\n        let elem = this as Element;\n        let matches = elem.ownerDocument\n          ? elem.ownerDocument.querySelectorAll(selector)\n          : [];\n        return Array.prototype.indexOf.call(matches, elem) !== -1;\n      }\n    );\n  })();\n\n  /**\n   * Calculate the specificity of a single selector.\n   *\n   * The behavior is undefined if the selector is invalid.\n   */\n  export function calculateSingle(selector: string): number {\n    // Ignore anything after the first comma.\n    selector = selector.split(',', 1)[0];\n\n    // Setup the aggregate counters.\n    let a = 0;\n    let b = 0;\n    let c = 0;\n\n    // Apply a regex to the front of the selector. If it succeeds, that\n    // portion of the selector is removed. Returns a success/fail flag.\n    function match(re: RegExp): boolean {\n      let match = selector.match(re);\n      if (match === null) {\n        return false;\n      }\n      selector = selector.slice(match[0].length);\n      return true;\n    }\n\n    // Replace the negation pseudo-class (which is ignored),\n    // but keep its inner content (which is not ignored).\n    selector = selector.replace(NEGATION_RE, ' $1 ');\n\n    // Continue matching until the selector is consumed.\n    while (selector.length > 0) {\n      // Match an ID selector.\n      if (match(ID_RE)) {\n        a++;\n        continue;\n      }\n\n      // Match a class selector.\n      if (match(CLASS_RE)) {\n        b++;\n        continue;\n      }\n\n      // Match an attribute selector.\n      if (match(ATTR_RE)) {\n        b++;\n        continue;\n      }\n\n      // Match a pseudo-element selector. This is done before matching\n      // a pseudo-class since this regex overlaps with that regex.\n      if (match(PSEUDO_ELEM_RE)) {\n        c++;\n        continue;\n      }\n\n      // Match a pseudo-class selector.\n      if (match(PSEDUO_CLASS_RE)) {\n        b++;\n        continue;\n      }\n\n      // Match a plain type selector.\n      if (match(TYPE_RE)) {\n        c++;\n        continue;\n      }\n\n      // Finally, match any ignored characters.\n      if (match(IGNORE_RE)) {\n        continue;\n      }\n\n      // At this point, the selector is assumed to be invalid.\n      return 0;\n    }\n\n    // Clamp each component to a reasonable base.\n    a = Math.min(a, 0xff);\n    b = Math.min(b, 0xff);\n    c = Math.min(c, 0xff);\n\n    // Combine the components into a single result.\n    return (a << 16) | (b << 8) | c;\n  }\n\n  /**\n   * A regex which matches an ID selector at string start.\n   */\n  const ID_RE = /^#[^\\s\\+>~#\\.\\[:]+/;\n\n  /**\n   * A regex which matches a class selector at string start.\n   */\n  const CLASS_RE = /^\\.[^\\s\\+>~#\\.\\[:]+/;\n\n  /**\n   * A regex which matches an attribute selector at string start.\n   */\n  const ATTR_RE = /^\\[[^\\]]+\\]/;\n\n  /**\n   * A regex which matches a type selector at string start.\n   */\n  const TYPE_RE = /^[^\\s\\+>~#\\.\\[:]+/;\n\n  /**\n   * A regex which matches a pseudo-element selector at string start.\n   */\n  const PSEUDO_ELEM_RE = /^(::[^\\s\\+>~#\\.\\[:]+|:first-line|:first-letter|:before|:after)/;\n\n  /**\n   * A regex which matches a pseudo-class selector at string start.\n   */\n  const PSEDUO_CLASS_RE = /^:[^\\s\\+>~#\\.\\[:]+/;\n\n  /**\n   * A regex which matches ignored characters at string start.\n   */\n  const IGNORE_RE = /^[\\s\\+>~\\*]+/;\n\n  /**\n   * A regex which matches the negation pseudo-class globally.\n   */\n  const NEGATION_RE = /:not\\(([^\\)]+)\\)/g;\n}\n"],
  "mappings": "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",
  "names": ["ArrayExt", "ArrayIterator", "KeyIterator", "ValueIterator", "ItemIterator", "FnIterator", "ChainIterator", "EmptyIterator", "EnumerateIterator", "FilterIterator", "MapIterator", "RangeIterator", "Private", "RepeatIterator", "RetroArrayIterator", "StrideIterator", "StringExt", "TakeIterator", "ZipIterator", "Private", "BPlusTree", "BranchNode", "LeafNode", "ForwardIterator", "RetroIterator", "LinkedList", "ForwardValueIterator", "RetroValueIterator", "ForwardNodeIterator", "RetroNodeIterator", "LinkedListNode", "d", "b", "Message", "ConflatableMessage", "MessageLoop", "Private", "init_index_es6", "ClipboardExt", "ElementExt", "Platform", "Selector", "match"]
}
