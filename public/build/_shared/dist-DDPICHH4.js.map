{
  "version": 3,
  "sources": ["../../../../../node_modules/myst-to-tex/dist/tables.js", "../../../../../node_modules/myst-to-tex/dist/container.js", "../../../../../node_modules/myst-to-tex/dist/types.js", "../../../../../node_modules/myst-to-tex/dist/utils.js", "../../../../../node_modules/myst-to-tex/dist/math.js", "../../../../../node_modules/myst-to-tex/dist/legends.js", "../../../../../node_modules/myst-to-tex/dist/proof.js", "../../../../../node_modules/myst-to-tex/dist/preamble.js", "../../../../../node_modules/myst-to-tex/dist/index.js"],
  "sourcesContent": ["export const TOTAL_TABLE_WIDTH = 886;\nexport function renderPColumn(width) {\n    if (width === 1)\n        return `p{\\\\dimexpr \\\\linewidth-2\\\\tabcolsep}`;\n    return `p{\\\\dimexpr ${width.toFixed(3)}\\\\linewidth-2\\\\tabcolsep}`;\n}\n/**\n * given a table node, return the column widths\n *\n * @param node  - node.type.name === 'table'\n * @returns\n */\nexport function getColumnWidths(node) {\n    var _a, _b, _c;\n    // TODO: unsure about rowspans\n    let bestMaybeWidths = [];\n    let mostNonNulls = 0;\n    for (let i = 0; i < node.children.length; i += 1) {\n        const row = node.children[i];\n        const maybeWidths = row.children.reduce((acc, cell) => {\n            var _a, _b;\n            const colwidth = new Array((_a = cell.colspan) !== null && _a !== void 0 ? _a : 1).fill(cell.width ? cell.width / ((_b = cell.colspan) !== null && _b !== void 0 ? _b : 1) : null);\n            return [...acc, ...colwidth];\n        }, []);\n        const nonNulls = maybeWidths.filter((maybeWidth) => maybeWidth > 0).length;\n        if (i === 0 || nonNulls >= mostNonNulls) {\n            mostNonNulls = nonNulls;\n            bestMaybeWidths = maybeWidths;\n            if (mostNonNulls === maybeWidths.length) {\n                break;\n            }\n        }\n    }\n    let widths;\n    if (mostNonNulls === bestMaybeWidths.length) {\n        widths = bestMaybeWidths;\n    }\n    else {\n        // need to fill in the null colwidths\n        const totalDefinedWidths = bestMaybeWidths.reduce((acc, cur) => (cur == null ? acc : acc + cur), 0);\n        const remainingSpace = TOTAL_TABLE_WIDTH - totalDefinedWidths;\n        const nullCells = bestMaybeWidths.length - mostNonNulls;\n        const defaultWidth = Math.floor(remainingSpace / nullCells);\n        widths = bestMaybeWidths.map((w) => (w == null || w === 0 ? defaultWidth : w));\n    }\n    const total = widths.reduce((acc, cur) => acc + cur, 0);\n    const fractionalWidths = widths.map((w) => w / total);\n    const columnSpec = fractionalWidths.map((w) => renderPColumn(w)).join('');\n    const numColumns = widths.length > 0 ? widths.length : (_c = (_b = (_a = node === null || node === void 0 ? void 0 : node.children[0]) === null || _a === void 0 ? void 0 : _a.children) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;\n    return { widths: fractionalWidths, columnSpec, numColumns };\n}\nfunction renderTableCell(state, cell, i, spanIdx, widths, childCount) {\n    var _a;\n    let renderedSpan = 1;\n    const colspan = (_a = cell.colspan) !== null && _a !== void 0 ? _a : 1;\n    if (colspan > 1) {\n        let width = 0;\n        for (let j = 0; j < colspan; j += 1) {\n            width += widths[spanIdx + j];\n        }\n        state.write(`\\\\multicolumn{${colspan}}{${renderPColumn(width)}}{`);\n        renderedSpan = colspan;\n    }\n    if (cell.children.length === 1 && cell.children[0].type === 'paragraph') {\n        // Render simple things inline, otherwise render a block\n        state.renderChildren(cell.children[0], true);\n    }\n    else {\n        state.renderChildren(cell, true);\n    }\n    if (colspan > 1)\n        state.write('}');\n    if (i < childCount - 1) {\n        state.write(' & ');\n    }\n    return renderedSpan;\n}\n/**\n * convert prosemirror table node into latex table\n */\nexport function renderNodeToLatex(node, state) {\n    state.usePackages('booktabs');\n    const { widths, columnSpec, numColumns } = getColumnWidths(node);\n    if (!numColumns) {\n        throw new Error('invalid table format, no columns');\n    }\n    state.data.isInTable = true; // this is cleared at the end of this function\n    if (!state.data.isInContainer) {\n        state.write('\\\\bigskip\\\\noindent');\n    }\n    state.ensureNewLine();\n    // if not in a longtable environment already (these replace the figure environment)\n    // let dedent;\n    // handle initial headers first\n    let numHeaderRowsFound = 0;\n    if (state.data.longFigure) {\n        state.ensureNewLine();\n        state.write('\\\\hline');\n        state.ensureNewLine();\n        let endHeader = false;\n        // write the first header section\n        node.children.forEach(({ children: rowContent }) => {\n            var _a, _b;\n            if (endHeader)\n                return;\n            if ((_a = rowContent[0]) === null || _a === void 0 ? void 0 : _a.header) {\n                numHeaderRowsFound += 1;\n                let spanIdx = 0;\n                rowContent.forEach((cell, i) => {\n                    spanIdx += renderTableCell(state, cell, i, spanIdx, widths, rowContent.length);\n                });\n                state.write(' \\\\\\\\');\n                state.ensureNewLine();\n            }\n            if (!((_b = rowContent[0]) === null || _b === void 0 ? void 0 : _b.header)) {\n                endHeader = true;\n            }\n        });\n        if (numHeaderRowsFound > 0) {\n            state.ensureNewLine();\n            state.write('\\\\hline');\n            state.ensureNewLine();\n            state.write('\\\\endfirsthead');\n            state.ensureNewLine();\n            state.write('\\\\hline');\n            state.ensureNewLine();\n            // write the continuation header section\n            state.write(`\\\\multicolumn{${numColumns}}{c}{\\\\tablename\\\\ \\\\thetable\\\\ -- \\\\textit{Continued from previous page}}\\\\\\\\`);\n            state.ensureNewLine();\n            node.children.forEach(({ children: rowContent }, index) => {\n                if (index >= numHeaderRowsFound)\n                    return;\n                let spanIdx = 0;\n                rowContent.forEach((cell, i) => {\n                    spanIdx += renderTableCell(state, cell, i, spanIdx, widths, rowContent.length);\n                });\n                state.write(' \\\\\\\\');\n                state.ensureNewLine();\n            });\n            state.ensureNewLine();\n            state.write('\\\\hline');\n            state.ensureNewLine();\n            state.write('\\\\endhead');\n            state.ensureNewLine();\n        }\n    }\n    else {\n        state.write(`\\\\begin{tabular}{${columnSpec}}`);\n        state.ensureNewLine();\n        // dedent = indent(state);\n        state.write(`\\\\toprule`);\n        state.ensureNewLine();\n    }\n    // todo: can we use offset and index to better handle row and column spans?\n    node.children.forEach(({ children: rowContent }, index) => {\n        var _a;\n        if (index < numHeaderRowsFound)\n            return; // skip the header rows\n        let spanIdx = 0;\n        rowContent.forEach((cell, i) => {\n            spanIdx += renderTableCell(state, cell, i, spanIdx, widths, rowContent.length);\n        });\n        state.write(' \\\\\\\\');\n        state.ensureNewLine();\n        // If the first cell in this row is a table header, make a line\n        if ((_a = rowContent[0]) === null || _a === void 0 ? void 0 : _a.header) {\n            state.write('\\\\hline');\n            state.ensureNewLine();\n        }\n    });\n    if (state.data.longFigure) {\n        state.write('\\\\hline');\n    }\n    else {\n        state.write('\\\\bottomrule');\n        state.ensureNewLine();\n        // dedent?.();\n        state.write('\\\\end{tabular}');\n    }\n    state.closeBlock(node);\n    state.data.isInTable = false;\n    if (!state.data.isInContainer) {\n        state.write('\\\\bigskip');\n    }\n}\n", "import { select } from 'unist-util-select';\nimport { getColumnWidths } from './tables.js';\nexport var CaptionKind;\n(function (CaptionKind) {\n    CaptionKind[\"fig\"] = \"fig\";\n    CaptionKind[\"eq\"] = \"eq\";\n    CaptionKind[\"code\"] = \"code\";\n    CaptionKind[\"table\"] = \"table\";\n})(CaptionKind || (CaptionKind = {}));\nfunction getClasses(className) {\n    var _a;\n    const classes = (_a = className === null || className === void 0 ? void 0 : className.split(' ').map((s) => s.trim().toLowerCase()).filter((s) => !!s)) !== null && _a !== void 0 ? _a : [];\n    return [...new Set(classes)];\n}\nfunction switchKind(node) {\n    switch (node.type) {\n        case 'iframe':\n        case 'image':\n            return CaptionKind.fig;\n        case 'table':\n            return CaptionKind.table;\n        case 'code':\n            return CaptionKind.code;\n        case 'math':\n            return CaptionKind.eq;\n        default:\n            return null;\n    }\n}\nexport function determineCaptionKind(node) {\n    var _a;\n    let kind = switchKind(node);\n    (_a = node.children) === null || _a === void 0 ? void 0 : _a.forEach((n) => {\n        const nKind = determineCaptionKind(n);\n        if (!kind) {\n            kind = nKind;\n        }\n        else if (nKind) {\n            // If there are multiple node kinds, revert to figure\n            kind = CaptionKind.fig;\n        }\n    });\n    return kind;\n}\nfunction nodeToCommand(node) {\n    const kind = determineCaptionKind(node);\n    const classes = getClasses(node.class);\n    const fullWidth = classes.includes('full-width') || classes.includes('w-full');\n    switch (kind) {\n        case CaptionKind.fig:\n            return fullWidth ? 'figure*' : 'figure';\n        case CaptionKind.table:\n            return fullWidth ? 'table*' : 'table';\n        case CaptionKind.code:\n            // TODO full width code\n            return 'figure';\n        case CaptionKind.eq:\n            return 'figure'; // not sure what to do here.\n        default:\n            return 'figure';\n    }\n}\nfunction nodeToLaTeXOptions(node) {\n    const kind = determineCaptionKind(node);\n    switch (kind) {\n        case CaptionKind.fig:\n        case CaptionKind.table:\n            return '!htbp';\n        case CaptionKind.code:\n            return 'h';\n        case CaptionKind.eq:\n        default:\n            return undefined;\n    }\n}\nexport const containerHandler = (node, state) => {\n    var _a;\n    if (state.data.isInTable) {\n        state.renderChildren(node);\n        return;\n    }\n    const table = select('table', node);\n    const containsTable = !!table;\n    let tableInfo;\n    if (table && node.multipage) {\n        tableInfo = getColumnWidths(table);\n    }\n    let before;\n    let after;\n    if (node.landscape) {\n        state.usePackages('pdflscape');\n        before = '\\\\begin{landscape}';\n        after = '\\\\end{landscape}';\n    }\n    const { enumerated, label, identifier, multipage } = node;\n    const localId = (_a = label !== null && label !== void 0 ? label : identifier) !== null && _a !== void 0 ? _a : undefined;\n    // TODO for longtable to work with two columns we need to flip out to single column first\n    // and then back to multi column, if we were in multicolumn mode\n    // Q: we can know if we are in a two column mode from the template we are using, but how is this made available at this level?\n    const command = containsTable && multipage ? 'longtable' : nodeToCommand(node);\n    if (command === 'longtable')\n        state.usePackages('longtable');\n    const commandOpts = containsTable && tableInfo ? tableInfo.columnSpec : undefined;\n    const bracketOpts = containsTable ? undefined : nodeToLaTeXOptions(node);\n    if (before)\n        state.write(before);\n    const optsInCommand = commandOpts ? `{${commandOpts}}` : '';\n    const optsInBrackets = bracketOpts ? `[${bracketOpts}]` : '';\n    state.write(`\\\\begin{${command}}${optsInCommand}${optsInBrackets}\\n`);\n    // TODO: Based on align attr\n    // may have to modify string returned by state.renderContent(n);\n    // https://tex.stackexchange.com/questions/91566/syntax-similar-to-centering-for-right-and-left\n    // centering does not work in a longtable environment\n    if (!multipage || !containsTable)\n        state.write('\\\\centering');\n    state.ensureNewLine();\n    state.data.longFigure = multipage;\n    const lastContainer = state.data.isInContainer;\n    state.data.isInContainer = true;\n    state.data.nextCaptionNumbered = enumerated !== null && enumerated !== void 0 ? enumerated : !!localId;\n    state.data.nextCaptionId = localId;\n    state.renderChildren(node);\n    state.trimEnd();\n    state.data.longFigure = undefined;\n    state.data.isInContainer = lastContainer;\n    state.write(`\\n\\\\end{${command}}`);\n    if (after)\n        state.write(after);\n    state.closeBlock(node);\n};\nexport const captionHandler = (node, state) => {\n    if (state.data.isInTable && node.type !== CaptionKind.table) {\n        // Skip captions in tables\n        return null;\n    }\n    state.ensureNewLine(true);\n    const { nextCaptionNumbered: numbered, nextCaptionId: id } = state.data;\n    // The square brackets here hold the \"listoffigures\" alternative figure description.\n    // This field is present because multi-paragraph captions will fail without\n    // this single paragraph alternative. For now, since we do not use \"listoffigures\"\n    // the square brackets are simply left empty. See https://tex.stackexchange.com/a/48313\n    // Note: There might be a bug here for multi-paragraph, unnumbered, captions.\n    //       The syntax `caption[]*` and `caption*[]` do not work.\n    const command = numbered === false ? 'caption*' : 'caption[]';\n    const after = numbered && id ? `\\\\label{${id}}` : '';\n    state.renderInlineEnvironment(node, command, { after });\n};\n", "export const DEFAULT_IMAGE_WIDTH = 0.7;\nexport const DEFAULT_PAGE_WIDTH_PIXELS = 800;\n", "import { DEFAULT_IMAGE_WIDTH, DEFAULT_PAGE_WIDTH_PIXELS } from './types.js';\n/** Removes nobreak and zero-width spaces */\nexport function cleanWhitespaceChars(text, nbsp = ' ') {\n    return text.replace(/\\u00A0/g, nbsp).replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n}\n// Funky placeholders (unlikely to be written ...?!)\nconst BACKSLASH_SPACE = '\uD83D\uDCA5\uD83C\uDFAFBACKSLASHSPACE\uD83C\uDFAF\uD83D\uDCA5';\nconst BACKSLASH = '\uD83D\uDCA5\uD83C\uDFAFBACKSLASH\uD83C\uDFAF\uD83D\uDCA5';\nconst TILDE = '\uD83D\uDCA5\uD83C\uDFAFTILDE\uD83C\uDFAF\uD83D\uDCA5';\nconst hrefOnlyReplacements = {\n    // Not allowed characters\n    // Latex escaped characters are: \\ & % $ # _ { } ~ ^\n    '&': '\\\\&',\n    '%': '\\\\%',\n    $: '\\\\$',\n    '#': '\\\\#',\n    _: '\\\\_',\n    '{': '\\\\{',\n    '}': '\\\\}',\n    '^': '\\\\^',\n};\nconst textOnlyReplacements = {\n    ...hrefOnlyReplacements,\n    // quotes\n    '\u2019': \"'\",\n    '\u2018': '`',\n    '\u201D': \"''\",\n    '\u201C': '``',\n    // guillemots\n    '\u00BB': '>>', // These could be improved\n    '\u00AB': '<<',\n    '\u2026': '\\\\dots',\n    '\u2013': '--',\n    '\u2014': '---',\n    // Commands gobble fhttps://texfaq.org/FAQ-xspaceollowing space\n    // See: https://texfaq.org/FAQ-xspace\n    '\u00A9': '\\\\textcopyright ',\n    '\u00AE': '\\\\textregistered ',\n    '\u2122': '\\\\texttrademark ',\n    '<': '\\\\textless ',\n    '>': '\\\\textgreater ',\n    '\u00A0': '~',\n    '\u202F': '~',\n    '\u2009': '\\\\,',\n};\nconst arrows = {\n    '\u2194': '\\\\leftrightarrow',\n    '\u21D4': '\\\\Leftrightarrow',\n    '\u2192': '\\\\rightarrow',\n    '\u21D2': '\\\\Rightarrow',\n    '\u2190': '\\\\leftarrow',\n    '\u21D0': '\\\\Leftarrow',\n};\nconst symbols = {\n    '\u2212': '-', // minus\n    '-': '-', // hyphen minus\n    '\uFE63': '-', // Small hyphen minus\n    '\uFF0D': '-', // Full-width Hyphen-minus\n    '\uFF0B': '+', // Full-width Plus\n};\nconst scripts = {\n    '\u2080': '\\\\textsubscript{0}',\n    '\u2081': '\\\\textsubscript{1}',\n    '\u2082': '\\\\textsubscript{2}',\n    '\u2083': '\\\\textsubscript{3}',\n    '\u2084': '\\\\textsubscript{4}',\n    '\u2085': '\\\\textsubscript{5}',\n    '\u2086': '\\\\textsubscript{6}',\n    '\u2087': '\\\\textsubscript{7}',\n    '\u2088': '\\\\textsubscript{8}',\n    '\u2089': '\\\\textsubscript{9}',\n    '\u208A': '\\\\textsubscript{+}',\n    '\u208B': '\\\\textsubscript{-}',\n    '\u208C': '\\\\textsubscript{=}',\n    '\u208D': '\\\\textsubscript{(}',\n    '\u208E': '\\\\textsubscript{)}',\n    \u2099: '\\\\textsubscript{n}',\n    '\u2070': '\\\\textsuperscript{0}',\n    '\u00B9': '\\\\textsuperscript{1}',\n    '\u00B2': '\\\\textsuperscript{2}',\n    '\u00B3': '\\\\textsuperscript{3}',\n    '\u2074': '\\\\textsuperscript{4}',\n    '\u2075': '\\\\textsuperscript{5}',\n    '\u2076': '\\\\textsuperscript{6}',\n    '\u2077': '\\\\textsuperscript{7}',\n    '\u2078': '\\\\textsuperscript{8}',\n    '\u2079': '\\\\textsuperscript{9}',\n    '\u22C5': '\\\\textsuperscript{.}',\n    '\u207A': '\\\\textsuperscript{.}',\n    '\u207B': '\\\\textsuperscript{-}',\n    '\u207C': '\\\\textsuperscript{=}',\n    '\u207D': '\\\\textsuperscript{(}',\n    '\u207E': '\\\\textsuperscript{)}',\n    \u207F: '\\\\textsuperscript{n}',\n    \u2071: '\\\\textsuperscript{i}',\n};\nconst textReplacements = {\n    ...textOnlyReplacements,\n    ...arrows,\n    ...symbols,\n    ...scripts,\n};\nconst mathReplacements = {\n    ...arrows,\n    ...symbols,\n    '\u00BD': '\\\\frac{1}{2}',\n    '\u2153': '\\\\frac{1}{3}',\n    '\u2154': '\\\\frac{2}{3}',\n    '\u00BC': '\\\\frac{1}{4}',\n    '\u2155': '\\\\frac{1}{5}',\n    '\u2156': '\\\\frac{2}{5}',\n    '\u2157': '\\\\frac{3}{5}',\n    '\u2158': '\\\\frac{4}{5}',\n    '\u2159': '\\\\frac{1}{6}',\n    '\u215A': '\\\\frac{5}{6}',\n    '\u2150': '\\\\frac{1}{7}',\n    '\u215B': '\\\\frac{1}{8}',\n    '\u215C': '\\\\frac{3}{8}',\n    '\u215D': '\\\\frac{5}{8}',\n    '\u215E': '\\\\frac{7}{8}',\n    '\u2151': '\\\\frac{1}{9}',\n    '\u2152': '\\\\frac{1}{10}',\n    '\u00B1': '\\\\pm',\n    '\u00D7': '\\\\times',\n    '\u22C6': '\\\\star',\n    \u0391: 'A',\n    \u03B1: '\\\\alpha',\n    \u0392: 'B',\n    \u03B2: '\\\\beta',\n    \u00DF: '\\\\beta',\n    \u0393: '\\\\Gamma',\n    \u03B3: '\\\\gamma',\n    \u0394: '\\\\Delta',\n    '\u2206': '\\\\Delta',\n    \u03B4: '\\\\delta',\n    \u0395: 'E',\n    \u03B5: '\\\\epsilon',\n    \u0396: 'Z',\n    \u03B6: '\\\\zeta',\n    \u0397: 'H',\n    \u03B7: '\\\\eta',\n    \u0398: '\\\\Theta',\n    \u03B8: '\\\\theta',\n    \u03D1: '\\\\vartheta',\n    \u0399: 'I',\n    \u03B9: '\\\\iota',\n    \u039A: 'K',\n    \u03BA: '\\\\kappa',\n    \u039B: '\\\\Lambda',\n    \u03BB: '\\\\lambda',\n    \u039C: 'M',\n    \u03BC: '\\\\mu',\n    \u039D: 'N',\n    \u03BD: '\\\\nu',\n    \u039E: '\\\\Xi',\n    \u03BE: '\\\\xi',\n    \u039F: 'O',\n    \u03BF: 'o',\n    \u03A0: '\\\\Pi',\n    \u03C0: '\\\\pi',\n    \u03A1: 'P',\n    \u03C1: '\\\\rho',\n    \u03A3: '\\\\Sigma',\n    \u03C3: '\\\\sigma',\n    \u03A4: 'T',\n    \u03C4: '\\\\tau',\n    \u03A5: '\\\\Upsilon',\n    \u03C5: '\\\\upsilon',\n    \u03A6: '\\\\Phi',\n    \u03D5: '\\\\phi',\n    \u03C6: '\\\\varphi',\n    \u03A7: 'X',\n    \u03C7: '\\\\chi',\n    \u03A8: '\\\\Psi',\n    \u03C8: '\\\\psi',\n    \u03A9: '\\\\Omega',\n    \u03C9: '\\\\omega',\n    '\u2202': '\\\\partial',\n    '\u221E': '\\\\infty',\n    '\u221D': '\\\\propto',\n    '\u29DC': '\\\\iinfin',\n    '\u29DD': '\\\\tieinfty',\n    '\u267E': '\\\\acidfree',\n    '\u2248': '\\\\approx',\n    '\u2260': '\\\\neq',\n    '\u2265': '\\\\geq',\n    '\u2264': '\\\\leq',\n    '\u2022': '\\\\cdot',\n    // '\u2030': '\\\\permille',\n};\nexport function hrefToLatexText(text) {\n    const replacedArray = Array.from(text !== null && text !== void 0 ? text : '').map((char) => {\n        if (hrefOnlyReplacements[char])\n            return { kind: 'text', text: hrefOnlyReplacements[char] };\n        return { kind: 'text', text: char };\n    });\n    const replaced = replacedArray\n        .reduce((arr, next) => {\n        const prev = arr.slice(-1)[0];\n        if ((prev === null || prev === void 0 ? void 0 : prev.kind) === next.kind)\n            prev.text += next.text;\n        else\n            arr.push(next);\n        return arr;\n    }, [])\n        .reduce((s, next) => {\n        return s + next.text;\n    }, '');\n    return replaced;\n}\nexport function stringToLatexText(text) {\n    const escaped = (text !== null && text !== void 0 ? text : '')\n        .replace(/\\\\ /g, BACKSLASH_SPACE)\n        .replace(/\\\\/g, BACKSLASH)\n        .replace(/~/g, TILDE);\n    const replacedArray = Array.from(escaped).map((char) => {\n        if (textReplacements[char])\n            return { kind: 'text', text: textReplacements[char] };\n        if (mathReplacements[char])\n            return { kind: 'math', text: mathReplacements[char] };\n        return { kind: 'text', text: char };\n    });\n    const replaced = replacedArray\n        .reduce((arr, next) => {\n        // Join any strings of math or text together (avoids $\\delta$$\\mu$ --> $\\delta\\mu$)\n        const prev = arr.slice(-1)[0];\n        if ((prev === null || prev === void 0 ? void 0 : prev.kind) === next.kind)\n            prev.text += next.text;\n        else\n            arr.push(next);\n        return arr;\n    }, [])\n        .reduce((s, next) => {\n        if (next.kind === 'math')\n            return `${s}$${next.text}$`;\n        return s + next.text;\n    }, '');\n    const final = replaced\n        .replace(new RegExp(BACKSLASH_SPACE, 'g'), '{\\\\textbackslash}~')\n        .replace(new RegExp(BACKSLASH, 'g'), '{\\\\textbackslash}')\n        .replace(new RegExp(TILDE, 'g'), '{\\\\textasciitilde}');\n    return cleanWhitespaceChars(final, '~');\n}\nexport function stringToLatexMath(text) {\n    const replaced = Array.from(text !== null && text !== void 0 ? text : '').reduce((s, char) => {\n        if (mathReplacements[char]) {\n            const space = s.slice(-1) === ' ' ? '' : ' ';\n            return `${s}${space}${mathReplacements[char]}`;\n        }\n        return s + char;\n    }, '');\n    const final = replaced.trim();\n    return cleanWhitespaceChars(final);\n}\nexport function getLatexImageWidth(width) {\n    if (typeof width === 'number' && Number.isNaN(width)) {\n        // If it is nan, return with the default.\n        return getLatexImageWidth(DEFAULT_IMAGE_WIDTH);\n    }\n    if (typeof width === 'string') {\n        if (width.endsWith('%')) {\n            return getLatexImageWidth(Number(width.replace('%', '')));\n        }\n        else if (width.endsWith('px')) {\n            return getLatexImageWidth(Number(width.replace('px', '')) / DEFAULT_PAGE_WIDTH_PIXELS);\n        }\n        console.log(`Unknown width ${width} in getLatexImageWidth`);\n        return getLatexImageWidth(DEFAULT_IMAGE_WIDTH);\n    }\n    let lineWidth = width !== null && width !== void 0 ? width : DEFAULT_IMAGE_WIDTH;\n    if (lineWidth < 1)\n        lineWidth *= 100;\n    return `${lineWidth / 100}\\\\linewidth`;\n}\nexport function getClasses(className) {\n    var _a;\n    const classes = (_a = className === null || className === void 0 ? void 0 : className.split(' ').map((s) => s.trim().toLowerCase()).filter((s) => !!s)) !== null && _a !== void 0 ? _a : [];\n    return Array.from(new Set(classes));\n}\n", "// Top level environments in amsmath version 2.1 (and eqnarray), see:\n// http://anorien.csc.warwick.ac.uk/mirrors/CTAN/macros/latex/required/amsmath/amsldoc.pdf\nconst ENVIRONMENTS = [\n    'equation',\n    'multline',\n    'gather',\n    'align',\n    'alignat',\n    'flalign',\n    'matrix',\n    'pmatrix',\n    'bmatrix',\n    'Bmatrix',\n    'vmatrix',\n    'Vmatrix',\n    'eqnarray',\n];\nconst RE_OPEN = new RegExp(`^\\\\\\\\begin{(${ENVIRONMENTS.join('|')})([*]?)}`);\nfunction isAmsmathEnvironment(value) {\n    const matchOpen = value.trim().match(RE_OPEN);\n    if (!matchOpen)\n        return false;\n    const [, environment, star] = matchOpen;\n    const end = `\\\\end{${environment}${star}}`;\n    const matchClose = value.trim().endsWith(end);\n    if (!matchClose)\n        return false;\n    return true;\n}\nfunction addMacrosToState(value, state) {\n    if (!state.options.math)\n        return;\n    Object.entries(state.options.math).forEach(([k, v]) => {\n        if (value.includes(k))\n            state.data.mathPlugins[k] = v.macro;\n    });\n}\n/**\n * Add any required recursive commands found, for example,\n * if only `\\aMat` was included in the content, but sill requires other commands:\n *\n * ```javascript\n * {\n *    '\\aNrm': \"a\",\n *    '\\aMat': '[\\mathrm{\\aNrm}]',\n * }\n * ```\n */\nexport function withRecursiveCommands(state, plugins = state.data.mathPlugins) {\n    if (!state.options.math)\n        return plugins;\n    const pluginsList = Object.entries(plugins);\n    const addedPlugins = {};\n    Object.entries(state.options.math).forEach(([k, v]) => {\n        if (plugins[k])\n            return;\n        pluginsList.forEach(([, value]) => {\n            if (value.includes(k))\n                addedPlugins[k] = v.macro;\n        });\n    });\n    const newPlugins = { ...addedPlugins, ...plugins };\n    if (Object.keys(addedPlugins).length === 0)\n        return newPlugins;\n    return withRecursiveCommands(state, newPlugins);\n}\nconst math = (node, state) => {\n    const { label, enumerated } = node;\n    const tightBefore = node.tight === true || node.tight === 'before';\n    const tightAfter = node.tight === true || node.tight === 'after';\n    if (tightBefore) {\n        // Removes the preceding space\n        state.ensureNewLine(true);\n    }\n    state.usePackages('amsmath');\n    addMacrosToState(node.value, state);\n    if (state.data.isInTable) {\n        state.write('\\\\(\\\\displaystyle ');\n        state.write(node.value);\n        state.write(' \\\\)');\n    }\n    else {\n        // Check if the node is an AMSMath environment, if so, render it directly\n        const isAmsMath = isAmsmathEnvironment(node.value);\n        if (isAmsMath) {\n            // TODO: labels may be stripped previously in the transform, we may need to back that out\n            state.ensureNewLine();\n            state.write(node.value);\n            state.ensureNewLine(true);\n        }\n        else {\n            // Otherwise enclose the math environment by equation + label\n            state.write(`\\\\begin{equation${enumerated === false ? '*' : ''}}\\n`);\n            if (label) {\n                state.write(`\\\\label{${label}}`);\n            }\n            state.ensureNewLine();\n            state.write(node.value);\n            state.ensureNewLine(true);\n            state.write(`\\\\end{equation${enumerated === false ? '*' : ''}}`);\n        }\n    }\n    if (state.data.isInTable)\n        return;\n    if (tightAfter) {\n        state.ensureNewLine(true);\n    }\n    else {\n        state.closeBlock(node);\n    }\n};\nconst inlineMath = (node, state) => {\n    state.usePackages('amsmath');\n    addMacrosToState(node.value, state);\n    state.write('$');\n    state.text(node.value, true);\n    state.write('$');\n};\nconst MATH_HANDLERS = { math, inlineMath };\nexport default MATH_HANDLERS;\n", "import { remove } from 'unist-util-remove';\nimport { selectAll } from 'unist-util-select';\n/**\n * Consolidate all caption/legend nodes on a container to a single caption\n */\nexport function transformLegends(mdast) {\n    const containers = selectAll('container', mdast);\n    containers.forEach((container) => {\n        var _a;\n        const captionsAndLegends = (_a = container.children) === null || _a === void 0 ? void 0 : _a.filter((child) => {\n            return child.type === 'caption' || child.type === 'legend';\n        });\n        if (!(captionsAndLegends === null || captionsAndLegends === void 0 ? void 0 : captionsAndLegends.length))\n            return;\n        captionsAndLegends[0].type = 'caption';\n        captionsAndLegends.slice(1).forEach((node) => {\n            var _a;\n            if (captionsAndLegends[0].children && node.children) {\n                (_a = captionsAndLegends[0].children) === null || _a === void 0 ? void 0 : _a.push(...node.children);\n            }\n            node.type = '__delete__';\n        });\n    });\n    remove(mdast, '__delete__');\n}\n", "import { fileError, writeTexLabelledComment, RuleId } from 'myst-common';\nimport { select } from 'unist-util-select';\nimport { remove } from 'unist-util-remove';\nfunction kindToEnvironment(kind) {\n    switch (kind) {\n        case 'theorem':\n            return 'theorem';\n        case 'proof':\n            return 'proof';\n        case 'proposition':\n            return 'proposition';\n        case 'definition':\n            return 'definition';\n        case 'example':\n            return 'example';\n        case 'remark':\n            return 'remark';\n        case 'axiom':\n            return 'axiom';\n        case 'conjecture':\n            return 'conjecture';\n        case 'lemma':\n            return 'lemma';\n        case 'observation':\n            return 'observation';\n        case 'corollary':\n            return 'corollary';\n        default:\n            return '';\n    }\n}\nexport const proofHandler = (node, state) => {\n    var _a;\n    state.usePackages('amsthm');\n    const p = node;\n    const env = kindToEnvironment((_a = p.kind) !== null && _a !== void 0 ? _a : 'proof');\n    if (!env) {\n        fileError(state.file, `Unhandled LaTeX proof environment \"${p.kind}\"`, {\n            node,\n            source: 'myst-to-tex',\n            ruleId: RuleId.texRenders,\n        });\n        return;\n    }\n    const t = select('admonitionTitle > text', node);\n    if (t) {\n        // Do not render the title twice\n        t.type = '__delete__';\n    }\n    const newNode = remove(node, '__delete__');\n    state.write('\\\\begin{');\n    state.write(env);\n    state.write('}');\n    if (t) {\n        state.write('[');\n        state.write(t.value);\n        state.write(']');\n    }\n    if (newNode.identifier && newNode.identifier.length > 0) {\n        state.write('\\\\label{');\n        state.write(newNode.identifier);\n        state.write('}');\n    }\n    state.renderChildren(newNode, true);\n    state.write('\\\\end{');\n    state.write(env);\n    state.write('}');\n    state.data.hasProofs = true;\n};\nexport class TexProofSerializer {\n    constructor() {\n        this.preamble = this.renderThmDefinitions();\n    }\n    renderThmDefinitions() {\n        const definitions = [\n            '\\\\newtheorem{theorem}{Theorem}[section]',\n            '\\\\newtheorem{corollary}{Corollary}[theorem]',\n            '\\\\newtheorem{lemma}[theorem]{Lemma}',\n            '\\\\newtheorem{proposition}{Proposition}[section]',\n            '\\\\newtheorem{definition}{Definition}[section]',\n            '\\\\newtheorem{example}{Example}[section]',\n            '\\\\newtheorem{remark}{Remark}[section]',\n            '\\\\newtheorem{axiom}{Axiom}[section]',\n            '\\\\newtheorem{conjecture}{Conjecture}[section]',\n            '\\\\newtheorem{observation}{Observation}[section]',\n        ];\n        const block = writeTexLabelledComment('theorem', definitions, TexProofSerializer.COMMENT_LENGTH);\n        const percents = ''.padEnd(TexProofSerializer.COMMENT_LENGTH, '%');\n        return `${percents}\\n${block}${percents}\\n`;\n    }\n}\nTexProofSerializer.COMMENT_LENGTH = 50;\n", "import { writeTexLabelledComment } from 'myst-common';\nimport { TexProofSerializer } from './proof.js';\nclass TexGlossaryAndAcronymSerializer {\n    constructor(glossaryDefinitions, acronymDefinitions) {\n        const withGlossary = Object.keys(glossaryDefinitions).length > 0;\n        const withAcronym = Object.keys(acronymDefinitions).length > 0;\n        if (!withGlossary && !withAcronym) {\n            this.printedDefinitions = '';\n            this.preamble = '';\n        }\n        else {\n            this.printedDefinitions = this.renderGlossary();\n            this.preamble = [\n                this.renderCommonImports(withAcronym),\n                this.renderImports('glossary', this.createGlossaryDirectives(glossaryDefinitions)),\n                this.renderImports('acronyms', this.createAcronymDirectives(acronymDefinitions)),\n            ]\n                .filter((item) => !!item)\n                .join('\\n');\n        }\n    }\n    renderGlossary() {\n        const block = writeTexLabelledComment('acronyms & glossary', ['\\\\printglossaries'], // Will print both glossary and abbreviations\n        TexGlossaryAndAcronymSerializer.COMMENT_LENGTH);\n        const percents = ''.padEnd(TexGlossaryAndAcronymSerializer.COMMENT_LENGTH, '%');\n        return `${percents}\\n${block}${percents}\\n`;\n    }\n    renderCommonImports(withAcronym) {\n        const usepackage = withAcronym\n            ? '\\\\usepackage[acronym]{glossaries}'\n            : '\\\\usepackage{glossaries}';\n        const makeglossaries = '\\\\makeglossaries';\n        return `${usepackage}\\n${makeglossaries}\\n`;\n    }\n    renderImports(commentTitle, directives) {\n        if (!directives)\n            return '';\n        const block = writeTexLabelledComment(commentTitle, directives, TexGlossaryAndAcronymSerializer.COMMENT_LENGTH);\n        if (!block)\n            return;\n        const percents = ''.padEnd(TexGlossaryAndAcronymSerializer.COMMENT_LENGTH, '%');\n        return `${percents}\\n${block}${percents}\\n`;\n    }\n    createGlossaryDirectives(glossaryDefinitions) {\n        const directives = Object.keys(glossaryDefinitions).map((k) => ({\n            key: k,\n            name: glossaryDefinitions[k][0],\n            description: glossaryDefinitions[k][1],\n        }));\n        const entries = directives.map((entry) => `\\\\newglossaryentry{${entry.key}}{name=${entry.name},description={${entry.description}}}`);\n        return entries;\n    }\n    createAcronymDirectives(acronymDefinitions) {\n        const directives = Object.keys(acronymDefinitions).map((k) => ({\n            key: k,\n            acronym: acronymDefinitions[k][0],\n            expansion: acronymDefinitions[k][1],\n        }));\n        return directives.map((entry) => `\\\\newacronym{${entry.key}}{${entry.acronym}}{${entry.expansion}}`);\n    }\n}\nTexGlossaryAndAcronymSerializer.COMMENT_LENGTH = 50;\nexport function generatePreamble(data) {\n    const preambleLines = [];\n    let suffix = '';\n    if (data.hasProofs) {\n        preambleLines.push(new TexProofSerializer().preamble);\n    }\n    if (data.printGlossaries) {\n        const glossaryState = new TexGlossaryAndAcronymSerializer(data.glossary, data.abbreviations);\n        preambleLines.push(glossaryState.preamble);\n        if (glossaryState.printedDefinitions) {\n            suffix = `\\n${glossaryState.printedDefinitions}`;\n        }\n    }\n    return { preamble: preambleLines.join('\\n'), suffix };\n}\nexport function mergePreambles(current, next, warningLogFn) {\n    const hasProofs = current.hasProofs || next.hasProofs;\n    const printGlossaries = current.printGlossaries || next.printGlossaries;\n    Object.keys(next.glossary).forEach((key) => {\n        if (Object.keys(current.glossary).includes(key)) {\n            warningLogFn(`duplicate glossary entry for '${key}'`);\n        }\n    });\n    Object.keys(next.abbreviations).forEach((key) => {\n        if (Object.keys(current.abbreviations).includes(key)) {\n            warningLogFn(`duplicate abbreviation definition for '${key}'`);\n        }\n    });\n    const glossary = { ...next.glossary, ...current.glossary };\n    const abbreviations = { ...next.abbreviations, ...current.abbreviations };\n    return { hasProofs, printGlossaries, glossary, abbreviations };\n}\n", "import { RuleId, fileError, toText, getMetadataTags } from 'myst-common';\nimport { captionHandler, containerHandler } from './container.js';\nimport { renderNodeToLatex } from './tables.js';\nimport { getClasses, getLatexImageWidth, hrefToLatexText, stringToLatexMath, stringToLatexText, } from './utils.js';\nimport MATH_HANDLERS, { withRecursiveCommands } from './math.js';\nimport { selectAll } from 'unist-util-select';\nimport { transformLegends } from './legends.js';\nimport { proofHandler } from './proof.js';\nexport * from './types.js';\nexport * from './preamble.js';\nconst glossaryReferenceHandler = (node, state) => {\n    if (!state.printGlossary) {\n        state.renderChildren(node, true);\n        return;\n    }\n    if (!node.identifier) {\n        state.renderChildren(node, true);\n        return;\n    }\n    const entry = state.glossary[node.identifier];\n    if (!entry) {\n        fileError(state.file, `Unknown glossary entry identifier \"${node.identifier}\"`, {\n            node,\n            source: 'myst-to-tex',\n            ruleId: RuleId.texRenders,\n        });\n        const gn = node;\n        state.write(toText(node).trim() || gn.label || '');\n        return;\n    }\n    state.write('\\\\gls{');\n    state.write(node.identifier);\n    state.write('}');\n};\nconst createFootnoteDefinitions = (tree) => Object.fromEntries(selectAll('footnoteDefinition', tree).map((node) => {\n    const fn = node;\n    return [fn.identifier, fn];\n}));\nconst createGlossaryDefinitions = (tree) => Object.fromEntries(selectAll('glossary > definitionList > *', tree)\n    .map((node, i, siblings) => {\n    if (node.type !== 'definitionTerm') {\n        return [];\n    }\n    const dt = node;\n    if (!dt.identifier) {\n        return [];\n    }\n    const dd = siblings[i + 1];\n    if (dd === undefined || dd.type !== 'definitionDescription') {\n        throw new Error(`Definition term has no associated description`);\n    }\n    const termText = toText(dt);\n    const descriptionText = toText(dd);\n    return [dt.identifier, [termText, descriptionText]];\n})\n    .filter((x) => x.length > 0));\nconst createAcronymRef = (input) => input.trim().toLowerCase();\nconst createAcronymDefinitions = (tree) => \n// Note: Abbreviations contain their resolved values, hence there\n//       can be many duplicates which will be collapsed when\n//       creating the dictionary\nObject.fromEntries(selectAll('abbreviation', tree)\n    .map((node) => {\n    const a = node;\n    const acronymText = toText(a);\n    if (!acronymText || !a.title) {\n        return [];\n    }\n    const key = createAcronymRef(acronymText);\n    return [key, [acronymText, a.title]]; // key => acronym, expansion\n})\n    .filter((x) => x.length > 0));\nconst handlers = {\n    text(node, state) {\n        state.text(node.value);\n    },\n    paragraph(node, state) {\n        state.renderChildren(node);\n    },\n    heading(node, state) {\n        const { depth, label, enumerated } = node;\n        if (state.data.nextHeadingIsFrameTitle) {\n            state.write('\\\\frametitle{');\n            state.data.nextHeadingIsFrameTitle = false;\n        }\n        else {\n            const star = enumerated !== false || state.options.beamer ? '' : '*';\n            if (depth === -1)\n                state.write(`\\\\part${star}{`);\n            if (depth === 0)\n                state.write(`\\\\chapter${star}{`);\n            if (depth === 1)\n                state.write(`\\\\section${star}{`);\n            if (depth === 2)\n                state.write(`\\\\subsection${star}{`);\n            if (depth === 3)\n                state.write(`\\\\subsubsection${star}{`);\n            if (depth === 4)\n                state.write(`\\\\paragraph${star}{`);\n            if (depth === 5)\n                state.write(`\\\\subparagraph${star}{`);\n            if (depth === 6)\n                state.write(`\\\\subparagraph${star}{`);\n        }\n        state.renderChildren(node, true);\n        state.write('}');\n        if (enumerated !== false && label && !node.implicit) {\n            state.write(`\\\\label{${label}}`);\n        }\n        state.closeBlock(node);\n    },\n    block(node, state) {\n        var _a, _b;\n        const metadataTags = getMetadataTags(node);\n        if (state.options.beamer) {\n            // Metadata from block `+++ { \"outline\": true }` is put in data field.\n            if (metadataTags.includes('outline')) {\n                // For beamer blocks that are outline, write the content as normal\n                // This will hopefully just be section and subsection\n                state.data.nextHeadingIsFrameTitle = false;\n                state.renderChildren(node, false);\n                return;\n            }\n            if (((_b = (_a = node.children) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.type) === 'heading') {\n                state.data.nextHeadingIsFrameTitle = true;\n            }\n            state.write('\\n\\n\\\\begin{frame}\\n');\n            state.renderChildren(node, false);\n            state.write('\\\\end{frame}\\n\\n');\n            return;\n        }\n        if (node.visibility === 'remove')\n            return;\n        if (metadataTags.includes('no-tex'))\n            return;\n        if (metadataTags.includes('no-pdf'))\n            return;\n        if (metadataTags.includes('new-page')) {\n            state.write('\\\\newpage\\n');\n        }\n        else if (metadataTags.includes('page-break')) {\n            state.write('\\\\pagebreak\\n');\n        }\n        state.renderChildren(node, false);\n    },\n    blockquote(node, state) {\n        state.renderEnvironment(node, 'quote');\n    },\n    definitionList(node, state) {\n        state.write('\\\\begin{description}\\n');\n        state.renderChildren(node, true);\n        state.ensureNewLine();\n        state.write('\\\\end{description}');\n        state.closeBlock(node);\n    },\n    definitionTerm(node, state) {\n        state.ensureNewLine();\n        state.write('\\\\item[');\n        state.renderChildren(node, true);\n        state.write('] ');\n    },\n    definitionDescription(node, state) {\n        state.renderChildren(node, true);\n    },\n    code(node, state) {\n        var _a;\n        let start = '\\\\begin{verbatim}\\n';\n        let end = '\\n\\\\end{verbatim}';\n        if (state.options.codeStyle === 'listings' ||\n            (getClasses(node.class).includes('listings') && node.lang !== undefined)) {\n            state.usePackages('listings');\n            start = `\\\\begin{lstlisting}[language=${node.lang}]\\n`;\n            end = '\\n\\\\end{lstlisting}';\n        }\n        else if (state.options.codeStyle === 'minted' || getClasses(node.class).includes('minted')) {\n            state.usePackages('minted');\n            start = `\\\\begin{minted}[breaklines]{${(_a = node.lang) !== null && _a !== void 0 ? _a : 'text'}}\\n`;\n            end = '\\n\\\\end{minted}';\n        }\n        state.write(start);\n        state.text(node.value, true);\n        state.write(end);\n        state.closeBlock(node);\n    },\n    list(node, state) {\n        if (state.data.isInTable) {\n            node.children.forEach((child, i) => {\n                state.write(node.ordered ? `${i}.~~` : '\\\\textbullet~~');\n                state.renderChildren(child, true);\n                state.write('\\\\newline');\n                state.ensureNewLine();\n            });\n        }\n        else {\n            state.renderEnvironment(node, node.ordered ? 'enumerate' : 'itemize', {\n                parameters: node.ordered && node.start !== 1 ? 'resume' : undefined,\n            });\n        }\n    },\n    listItem(node, state) {\n        state.write('\\\\item ');\n        state.renderChildren(node, true);\n        state.write('\\n');\n    },\n    thematicBreak(node, state) {\n        state.write('\\n\\\\bigskip\\n\\\\centerline{\\\\rule{13cm}{0.4pt}}\\n\\\\bigskip');\n        state.closeBlock(node);\n    },\n    ...MATH_HANDLERS,\n    mystRole(node, state) {\n        state.renderChildren(node, true);\n    },\n    mystDirective(node, state) {\n        state.renderChildren(node, false);\n    },\n    div(node, state) {\n        state.renderChildren(node, false);\n    },\n    span(node, state) {\n        state.renderChildren(node, true);\n    },\n    comment(node, state) {\n        var _a, _b;\n        state.ensureNewLine();\n        state.write(`% ${(_b = (_a = node.value) === null || _a === void 0 ? void 0 : _a.split('\\n').join('\\n% ')) !== null && _b !== void 0 ? _b : ''}`);\n        state.closeBlock(node);\n    },\n    strong(node, state) {\n        state.renderInlineEnvironment(node, 'textbf');\n    },\n    emphasis(node, state) {\n        state.renderInlineEnvironment(node, 'textit');\n    },\n    underline(node, state) {\n        state.renderInlineEnvironment(node, 'uline');\n    },\n    inlineCode(node, state) {\n        state.write('\\\\texttt{');\n        state.text(node.value, false);\n        state.write('}');\n    },\n    subscript(node, state) {\n        state.renderInlineEnvironment(node, 'textsubscript');\n    },\n    superscript(node, state) {\n        state.renderInlineEnvironment(node, 'textsuperscript');\n    },\n    delete(node, state) {\n        // \\usepackage[normalem]{ulem}\n        state.usePackages('ulem');\n        state.renderInlineEnvironment(node, 'sout');\n    },\n    break(node, state) {\n        // Use \\newline instead of `\\\\` for breaks in LaTeX, it works in all phrasing contexts.\n        // `\\\\` is used in tables to denote a new row.\n        state.write('\\\\newline');\n        state.ensureNewLine();\n    },\n    abbreviation(node, state) {\n        if (!state.printGlossary) {\n            state.renderChildren(node, true);\n            return;\n        }\n        const acronymText = toText(node);\n        if (!acronymText) {\n            return [];\n        }\n        const ref = createAcronymRef(acronymText);\n        const entry = state.abbreviations[ref];\n        if (!entry) {\n            fileError(state.file, `Unknown abbreviation entry identifier \"${ref}\"`, {\n                node,\n                source: 'myst-to-tex',\n                ruleId: RuleId.texRenders,\n            });\n            return;\n        }\n        state.write('\\\\acrshort{');\n        state.write(ref);\n        state.write('}');\n    },\n    glossary() {\n        // Glossary definitions are handled at once when constructing the serializer\n        // Nothing to do here\n    },\n    link(node, state) {\n        var _a;\n        state.usePackages('url', 'hyperref');\n        const href = node.url;\n        if (((_a = node.children[0]) === null || _a === void 0 ? void 0 : _a.value) === href) {\n            // URL is the same\n            state.write('\\\\url{');\n            state.write(hrefToLatexText(href));\n            state.write('}');\n            return;\n        }\n        state.write('\\\\href{');\n        state.write(hrefToLatexText(href));\n        state.write('}{');\n        state.renderChildren(node, true);\n        state.write('}');\n    },\n    admonition(node, state) {\n        state.usePackages('framed');\n        state.renderEnvironment(node, 'framed');\n    },\n    admonitionTitle(node, state) {\n        state.renderInlineEnvironment(node, 'textbf');\n        state.write('\\\\\\\\\\n');\n    },\n    table: renderNodeToLatex,\n    image(node, state) {\n        state.usePackages('graphicx');\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { width: nodeWidth, url: nodeSrc, align: nodeAlign } = node;\n        const src = nodeSrc;\n        const width = getLatexImageWidth(nodeWidth);\n        // if (!state.data.isInContainer) {\n        //   const align =\n        //     { left: 'flushleft', right: 'flushright' }[(nodeAlign as string)?.toLowerCase()] ??\n        //     'center';\n        //   state.write(`\\\\begin{${align}}\\n\\\\includegraphics[width=${width}]{${src}}\\n\\\\end{${align}}`);\n        //   state.closeBlock(node);\n        //   return;\n        // }\n        state.write(`\\\\includegraphics[width=${width}]{${src}}`);\n        state.closeBlock(node);\n    },\n    container: containerHandler,\n    proof: proofHandler,\n    caption: captionHandler,\n    captionNumber: () => undefined,\n    crossReference(node, state, parent) {\n        var _a, _b;\n        if (node.kind === 'definitionTerm') {\n            glossaryReferenceHandler(node, state, parent);\n            return;\n        }\n        // Note: if the md doc references a term not defined in the glossary,\n        //       the mdast will not have kind=definitionTerm and the logic\n        //       will follow this branch\n        // Look up reference and add the text\n        const usedTemplate = ((_a = node.template) === null || _a === void 0 ? void 0 : _a.includes('%s')) ? node.template : undefined;\n        const text = ((_b = (usedTemplate !== null && usedTemplate !== void 0 ? usedTemplate : toText(node))) === null || _b === void 0 ? void 0 : _b.replace(/\\s/g, '~')) || '%s';\n        const id = node.label;\n        state.write(text.replace(/%s/g, `\\\\ref{${id}}`));\n    },\n    citeGroup(node, state) {\n        if (state.options.citestyle === 'numerical-only') {\n            state.write('\\\\cite{');\n        }\n        else if (state.options.bibliography === 'biblatex') {\n            const command = node.kind === 'narrative' ? 'textcite' : 'parencite';\n            state.write(`\\\\${command}{`);\n        }\n        else {\n            const tp = node.kind === 'narrative' ? 't' : 'p';\n            state.write(`\\\\cite${tp}{`);\n        }\n        state.renderChildren(node, true, ', ');\n        state.write('}');\n    },\n    cite(node, state, parent) {\n        if (!state.options.bibliography) {\n            state.usePackages('natbib');\n            // Don't include biblatex in the package list\n        }\n        if (parent.type === 'citeGroup') {\n            state.write(node.label);\n        }\n        else if (state.options.bibliography === 'biblatex') {\n            state.write(`\\\\textcite{${node.label}}`);\n        }\n        else {\n            state.write(`\\\\cite{${node.label}}`);\n        }\n    },\n    embed(node, state) {\n        state.renderChildren(node, true);\n    },\n    include(node, state) {\n        state.renderChildren(node, true);\n    },\n    footnoteReference(node, state) {\n        if (!node.identifier)\n            return;\n        const footnote = state.footnotes[node.identifier];\n        if (!footnote) {\n            fileError(state.file, `Unknown footnote identifier \"${node.identifier}\"`, {\n                node,\n                source: 'myst-to-tex',\n                ruleId: RuleId.texRenders,\n            });\n            return;\n        }\n        state.write('\\\\footnote{');\n        state.renderChildren(footnote, true);\n        state.trimEnd();\n        state.write('}');\n    },\n    footnoteDefinition() {\n        // Nothing!\n    },\n    si(node, state) {\n        var _a, _b, _c, _d;\n        state.usePackages('siunitx');\n        if (node.number == null) {\n            state.write(`\\\\unit{${(_b = (_a = node.units) === null || _a === void 0 ? void 0 : _a.map((u) => `\\\\${u}`).join('')) !== null && _b !== void 0 ? _b : ''}}`);\n        }\n        else {\n            state.write(`\\\\qty{${node.number}}{${(_d = (_c = node.units) === null || _c === void 0 ? void 0 : _c.map((u) => `\\\\${u}`).join('')) !== null && _d !== void 0 ? _d : ''}}`);\n        }\n    },\n    inlineExpression(node, state) {\n        var _a;\n        if ((_a = node.children) === null || _a === void 0 ? void 0 : _a.length) {\n            state.renderChildren(node, true);\n        }\n        else {\n            state.write('\\\\texttt{');\n            state.text(node.value, false);\n            state.write('}');\n        }\n    },\n};\nclass TexSerializer {\n    constructor(file, tree, opts) {\n        var _a, _b;\n        file.result = '';\n        this.file = file;\n        this.options = opts !== null && opts !== void 0 ? opts : {};\n        this.data = { mathPlugins: {}, imports: new Set() };\n        this.handlers = (_a = opts === null || opts === void 0 ? void 0 : opts.handlers) !== null && _a !== void 0 ? _a : handlers;\n        this.references = (_b = opts === null || opts === void 0 ? void 0 : opts.references) !== null && _b !== void 0 ? _b : {};\n        this.footnotes = createFootnoteDefinitions(tree);\n        // Improve: render definition when encountering terms\n        this.glossary = (opts === null || opts === void 0 ? void 0 : opts.printGlossaries) ? createGlossaryDefinitions(tree) : {};\n        // Improve: render definition when encountering terms\n        this.abbreviations = (opts === null || opts === void 0 ? void 0 : opts.printGlossaries) ? createAcronymDefinitions(tree) : {};\n        this.renderChildren(tree);\n    }\n    get printGlossary() {\n        return this.options.printGlossaries === true;\n    }\n    get out() {\n        return this.file.result;\n    }\n    usePackages(...packageNames) {\n        packageNames.forEach((p) => {\n            this.data.imports.add(p);\n        });\n    }\n    write(value) {\n        this.file.result += value;\n    }\n    text(value, mathMode = false) {\n        const escaped = mathMode ? stringToLatexMath(value) : stringToLatexText(value);\n        this.write(escaped);\n    }\n    trimEnd() {\n        this.file.result = this.out.trimEnd();\n    }\n    ensureNewLine(trim = false) {\n        if (trim)\n            this.trimEnd();\n        if (this.out.endsWith('\\n'))\n            return;\n        this.write('\\n');\n    }\n    renderChildren(node, inline = false, delim = '') {\n        var _a, _b, _c;\n        const numChildren = (_b = (_a = node.children) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n        (_c = node.children) === null || _c === void 0 ? void 0 : _c.forEach((child, index) => {\n            const handler = this.handlers[child.type];\n            if (handler) {\n                handler(child, this, node);\n            }\n            else {\n                fileError(this.file, `Unhandled LaTeX conversion for node of \"${child.type}\"`, {\n                    node: child,\n                    source: 'myst-to-tex',\n                    ruleId: RuleId.texRenders,\n                });\n            }\n            if (delim && index + 1 < numChildren)\n                this.write(delim);\n        });\n        if (!inline)\n            this.closeBlock(node);\n    }\n    renderEnvironment(node, env, opts) {\n        const optsInBrackets = (opts === null || opts === void 0 ? void 0 : opts.parameters) ? `[${opts.parameters}]` : '';\n        const optsInBraces = (opts === null || opts === void 0 ? void 0 : opts.arguments) ? `{${opts.arguments.join('}{')}}` : '';\n        this.file.result += `\\\\begin{${env}}${optsInBrackets}${optsInBraces}\\n`;\n        this.renderChildren(node, true);\n        this.ensureNewLine(true);\n        this.file.result += `\\\\end{${env}}`;\n        this.closeBlock(node);\n    }\n    renderInlineEnvironment(node, env, opts) {\n        this.file.result += `\\\\${env}{`;\n        this.renderChildren(node, true);\n        this.trimEnd();\n        this.file.result += '}';\n        if (opts === null || opts === void 0 ? void 0 : opts.after) {\n            this.ensureNewLine(true);\n            this.write(opts.after);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    closeBlock(node) {\n        this.ensureNewLine(true);\n        this.file.result += '\\n';\n    }\n}\nconst plugin = function (opts) {\n    this.Compiler = (node, file) => {\n        transformLegends(node);\n        const state = new TexSerializer(file, node, opts !== null && opts !== void 0 ? opts : { handlers });\n        const tex = file.result.trim();\n        const result = {\n            imports: [...state.data.imports],\n            preamble: {\n                hasProofs: state.data.hasProofs,\n                printGlossaries: opts === null || opts === void 0 ? void 0 : opts.printGlossaries,\n                glossary: state.glossary,\n                abbreviations: state.abbreviations,\n            },\n            commands: withRecursiveCommands(state),\n            value: tex,\n        };\n        file.result = result;\n        return file;\n    };\n    return (node) => {\n        // Preprocess\n        return node;\n    };\n};\nexport default plugin;\n"],
  "mappings": "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,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,QAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,QAAK;AAAA,EACL,QAAK;AAAA,EACL,UAAK;AAAA,EACL,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,UAAK;AAAA,EACL,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,QAAG;AAAA,EACH,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA,EACL,UAAK;AAAA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",
  "names": ["_a", "_b", "CaptionKind", "getClasses", "_a", "getClasses"]
}
